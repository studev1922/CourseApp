/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.course.views;

import java.awt.Color;
import java.awt.Component;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

import com.course.dao.NhanVienDAO;
import com.course.entites.NhanVien;
import com.course.model.Author;
import com.course.model.MsgBox;
import com.course.model.Sqlbase;
import com.course.model.Util;
import com.course.model.Validate;

/**
 *
 * @author abc
 */
public final class NhanVienJFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form JFrame
     *
     * @param component vị trí lớp cha
     */
    public NhanVienJFrame(Component component) {
        if (Author.isLogin()) {
            initComponents();
            this.initData(component);
        } else {
            int answer = MsgBox.confirm(component, "Bạn chưa đăng nhập tài khoản!\n"
                    + "Bạn có muốn tới trang đăng nhập?",
                    "Chưa đăng nhập tài khoản.", MsgBox.BaoLoi);
            if (answer == 0) {
                this.dispose();
                new DangNhapJDialog(this, true).setVisible(true);
            } else {
                System.exit(0);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rdoRole = new javax.swing.ButtonGroup();
        lblQuanLyNV = new javax.swing.JLabel();
        tabsQuanLyNH = new javax.swing.JTabbedPane();
        pnlCapNhatNH = new javax.swing.JPanel();
        lblMaNV = new javax.swing.JLabel();
        lblMatKhauNV = new javax.swing.JLabel();
        lblXacNhanMK = new javax.swing.JLabel();
        lblHoVaTenNV = new javax.swing.JLabel();
        lblVaiTro = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();
        txtMatKhauNV = new javax.swing.JPasswordField();
        txtXacNhanMK = new javax.swing.JPasswordField();
        txtHoVaTen = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        bntThem = new javax.swing.JButton();
        bntSua = new javax.swing.JButton();
        bntXoa = new javax.swing.JButton();
        bntMoi = new javax.swing.JButton();
        bntFirst = new javax.swing.JButton();
        bntPrev = new javax.swing.JButton();
        bntNext = new javax.swing.JButton();
        bntEnd = new javax.swing.JButton();
        rdoTruongPhong = new javax.swing.JRadioButton();
        rdoNhanVien = new javax.swing.JRadioButton();
        pnlDanhSachNV = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        spnDanhSachNV = new javax.swing.JScrollPane();
        tblNhanVien = new javax.swing.JTable();
        btnExportHocVien = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EduSys - Quản lý nhân viên");

        lblQuanLyNV.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        lblQuanLyNV.setForeground(java.awt.Color.blue);
        lblQuanLyNV.setText("QUẢN LÝ NHÂN VIÊN");

        tabsQuanLyNH.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        lblMaNV.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblMaNV.setText("Mã nhân viên");

        lblMatKhauNV.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblMatKhauNV.setText("Mật khẩu");

        lblXacNhanMK.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblXacNhanMK.setText("Xác nhân mật khẩu");

        lblHoVaTenNV.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblHoVaTenNV.setText("Họ và tên");

        lblVaiTro.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblVaiTro.setText("Vai trò");

        lblEmail.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblEmail.setText("Email nhân viên");

        txtMaNV.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtMatKhauNV.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtMatKhauNV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMatKhauNVKeyReleased(evt);
            }
        });

        txtXacNhanMK.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtHoVaTen.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtEmail.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        bntThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Add.png"))); // NOI18N
        bntThem.setText("Thêm");
        bntThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntThemActionPerformed(evt);
            }
        });

        bntSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Update.png"))); // NOI18N
        bntSua.setText("Sửa");
        bntSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSuaActionPerformed(evt);
            }
        });

        bntXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Delete.png"))); // NOI18N
        bntXoa.setText("Xóa");
        bntXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntXoaActionPerformed(evt);
            }
        });

        bntMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/info.png"))); // NOI18N
        bntMoi.setText("Mới");
        bntMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntMoiActionPerformed(evt);
            }
        });

        bntFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/First.png"))); // NOI18N
        bntFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntFirstActionPerformed(evt);
            }
        });

        bntPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Prev.png"))); // NOI18N
        bntPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPrevActionPerformed(evt);
            }
        });

        bntNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Next.png"))); // NOI18N
        bntNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntNextActionPerformed(evt);
            }
        });

        bntEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/End.png"))); // NOI18N
        bntEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEndActionPerformed(evt);
            }
        });

        rdoRole.add(rdoTruongPhong);
        rdoTruongPhong.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        rdoTruongPhong.setText("Trưởng phòng");
        rdoTruongPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTruongPhongActionPerformed(evt);
            }
        });

        rdoRole.add(rdoNhanVien);
        rdoNhanVien.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        rdoNhanVien.setSelected(true);
        rdoNhanVien.setText("Nhân viên");

        javax.swing.GroupLayout pnlCapNhatNHLayout = new javax.swing.GroupLayout(pnlCapNhatNH);
        pnlCapNhatNH.setLayout(pnlCapNhatNHLayout);
        pnlCapNhatNHLayout.setHorizontalGroup(
            pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMatKhauNV)
                    .addComponent(lblMaNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMaNV)
                    .addComponent(lblMatKhauNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                        .addComponent(bntThem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntSua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntMoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(bntFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntPrev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntEnd))
                    .addComponent(txtXacNhanMK)
                    .addComponent(lblXacNhanMK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHoVaTenNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtHoVaTen)
                    .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtEmail)
                    .addComponent(lblVaiTro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                        .addComponent(rdoNhanVien)
                        .addGap(18, 18, 18)
                        .addComponent(rdoTruongPhong)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnlCapNhatNHLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rdoNhanVien, rdoTruongPhong});

        pnlCapNhatNHLayout.setVerticalGroup(
            pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMatKhauNV, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(txtMatKhauNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblXacNhanMK, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtXacNhanMK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHoVaTenNV, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHoVaTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblVaiTro, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoTruongPhong)
                    .addComponent(rdoNhanVien))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bntThem)
                    .addComponent(bntFirst)
                    .addComponent(bntPrev)
                    .addComponent(bntNext)
                    .addComponent(bntEnd)
                    .addComponent(bntSua)
                    .addComponent(bntXoa)
                    .addComponent(bntMoi))
                .addContainerGap())
        );

        pnlCapNhatNHLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bntEnd, bntFirst, bntMoi, bntNext, bntPrev, bntSua, bntThem, bntXoa});

        tabsQuanLyNH.addTab("CẬP NHẬT", pnlCapNhatNH);

        txtTimKiem.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtTimKiem.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tim kiếm theo tên", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 1, 12))); // NOI18N
        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });

        tblNhanVien.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        tblNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ NV", "MẬT KHẨU", "HỌ VÀ TÊN", "EmailNV", "VAI TRÒ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNhanVien.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienMouseClicked(evt);
            }
        });
        spnDanhSachNV.setViewportView(tblNhanVien);
        if (tblNhanVien.getColumnModel().getColumnCount() > 0) {
            tblNhanVien.getColumnModel().getColumn(0).setMaxWidth(80);
            tblNhanVien.getColumnModel().getColumn(2).setMinWidth(120);
            tblNhanVien.getColumnModel().getColumn(3).setMinWidth(80);
        }

        btnExportHocVien.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        btnExportHocVien.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/excel.png"))); // NOI18N
        btnExportHocVien.setText("Export");
        btnExportHocVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportHocVienActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDanhSachNVLayout = new javax.swing.GroupLayout(pnlDanhSachNV);
        pnlDanhSachNV.setLayout(pnlDanhSachNVLayout);
        pnlDanhSachNVLayout.setHorizontalGroup(
            pnlDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachNVLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnDanhSachNV, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                    .addGroup(pnlDanhSachNVLayout.createSequentialGroup()
                        .addComponent(txtTimKiem)
                        .addGap(18, 18, 18)
                        .addComponent(btnExportHocVien)))
                .addContainerGap())
        );
        pnlDanhSachNVLayout.setVerticalGroup(
            pnlDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDanhSachNVLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportHocVien))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spnDanhSachNV, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsQuanLyNH.addTab("DANH SÁCH", pnlDanhSachNV);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuanLyNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabsQuanLyNH)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblQuanLyNV, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabsQuanLyNH)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntThemActionPerformed
        if (Author.isLogin()) {
            if (Author.isManager()) {
                this.Insert();
            } else {
                MsgBox.alert(this, "Chức năng thêm chưa dành cho nhân viên!",
                        "Thêm nhân viên", MsgBox.CanhBao);
            }
        }
    }//GEN-LAST:event_bntThemActionPerformed

    private void bntSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSuaActionPerformed
        if (Author.isLogin())
            this.Update();
    }//GEN-LAST:event_bntSuaActionPerformed

    private void bntXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntXoaActionPerformed
        if (Author.isLogin()) {
            if (this.Power()) {
                this.Delete();
            }
        }
    }//GEN-LAST:event_bntXoaActionPerformed

    private void bntMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntMoiActionPerformed
        if (Author.isLogin()) {
            this.row = -1;
            this.ClearForm();
            this.UpdateStatus();
        }
    }//GEN-LAST:event_bntMoiActionPerformed

    private void bntFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntFirstActionPerformed
        if (Author.isLogin())
            this.Directional(row = 0);
    }//GEN-LAST:event_bntFirstActionPerformed

    private void bntPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPrevActionPerformed
        if (Author.isLogin())
            this.Directional(row > 0 ? --row : 0);
    }//GEN-LAST:event_bntPrevActionPerformed

    private void bntNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNextActionPerformed
        if (Author.isLogin()) {
            row = list.isEmpty() ? -1 : ++row;
            this.Directional(row);
        }
    }//GEN-LAST:event_bntNextActionPerformed

    private void bntEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEndActionPerformed
        if (Author.isLogin()) {
            row = list.isEmpty() ? -1 : list.size() - 1;
            this.Directional(row);
        }
    }//GEN-LAST:event_bntEndActionPerformed

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        if (Author.isLogin()) {
            String fT = txtTimKiem.getText();
            String sql = Sqlbase.sqlNV.SQL_SELECT 
                    + " where HoTen like N'%"
                    + fT + "%' or MaNV like N'%" 
                    + fT + "%' or EmailNV like N'%" + fT + "%'";
            list = dao.SelectBySql(sql);
            fillTable();
        }
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void rdoTruongPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTruongPhongActionPerformed
        if (Author.isLogin())
            this.Power();
    }//GEN-LAST:event_rdoTruongPhongActionPerformed

    private void tblNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseClicked
        if (evt.getClickCount() > 1)
            this.clickTable();
    }//GEN-LAST:event_tblNhanVienMouseClicked

    private void txtMatKhauNVKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMatKhauNVKeyReleased
        boolean check = row > -1 && row < list.size();
        CheckStaff(check, evt.getKeyCode());
    }//GEN-LAST:event_txtMatKhauNVKeyReleased

    private void btnExportHocVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportHocVienActionPerformed
        try {
            Util.saveToExcel(tblNhanVien);
        } catch (Exception e) {
            MsgBox.alert(btnExportHocVien, "Export failed by: " + e.getMessage(), "Export to excel", MsgBox.BaoLoi);
        }
    }//GEN-LAST:event_btnExportHocVienActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NhanVienJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new NhanVienJFrame(null).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntEnd;
    private javax.swing.JButton bntFirst;
    private javax.swing.JButton bntMoi;
    private javax.swing.JButton bntNext;
    private javax.swing.JButton bntPrev;
    private javax.swing.JButton bntSua;
    private javax.swing.JButton bntThem;
    private javax.swing.JButton bntXoa;
    private javax.swing.JButton btnExportHocVien;
    private javax.swing.JButton btnExportNguoiHoc;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblHoVaTenNV;
    private javax.swing.JLabel lblMaNV;
    private javax.swing.JLabel lblMatKhauNV;
    private javax.swing.JLabel lblQuanLyNV;
    private javax.swing.JLabel lblVaiTro;
    private javax.swing.JLabel lblXacNhanMK;
    private javax.swing.JPanel pnlCapNhatNH;
    private javax.swing.JPanel pnlDanhSachNV;
    private javax.swing.JRadioButton rdoNhanVien;
    private javax.swing.ButtonGroup rdoRole;
    private javax.swing.JRadioButton rdoTruongPhong;
    private javax.swing.JScrollPane spnDanhSachNV;
    private javax.swing.JTabbedPane tabsQuanLyNH;
    private javax.swing.JTable tblNhanVien;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHoVaTen;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JPasswordField txtMatKhauNV;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JPasswordField txtXacNhanMK;
    // End of variables declaration//GEN-END:variables

    // Biến toàn cục thao tác dữ liệu
    private final NhanVienDAO dao = new NhanVienDAO(); // Thao tác database
    private List<NhanVien> list = new LinkedList<>();
    private DefaultTableModel model = null; // Model xét dữ liệu bảng
    private int row = -1; // Vị trí thông tin danh sách

    // Quản lý vai trò nhân viên
    private boolean Power() {
        boolean nv = Author.isManager();
        if (!nv) {
            rdoNhanVien.setSelected(true);
            MsgBox.alert(this, "Bạn là nhân viên không được xóa, và sửa vai trò!",
                    "Vai trò: nhân viên!", MsgBox.CanhBao);
        }
        return nv;
    }

    // Tải dữ liệu lần đầu từ database
    private void initData(Component c) {
        list = dao.SelectAll();
        this.fillTable();
        this.tblNhanVien.setAutoCreateRowSorter(true);
        this.setIconImage(((JFrame) c).getIconImage());
        this.setLocationRelativeTo(c);
        this.UpdateStatus();
    }

    // Thêm dữ liệu vào database
    private void Insert() {
        if (findList(txtMaNV.getText()) == -1) {
            // Kiểm tra không tồn tại
            NhanVien nhanvien = this.getForm();
            if (nhanvien != null) {
                // Lấy thông tin nhân viên và thêm dữ liệu
                if (dao.Insert(nhanvien)) {
                    list.add(nhanvien);
                    MsgBox.alert(this, "Đã \"thêm\" mới nhân viên.",
                            "Thêm nhân viên", MsgBox.ThongTin);

                    this.ClearForm(); // Xóa form
                    this.fillTable(); // Xem thông tin
                    this.UpdateStatus(); // Cập nhật điều hướng
                    this.clearBgrTxtForm(); // Xóa txt background
                } else {
                    MsgBox.alert(this, "Không thể thêm nhân viên đang tại!",
                            "Thêm nhân viên", MsgBox.CanhBao);
                }
            }
        } else {
            MsgBox.alert(this, "Mã nhân viên \"" + txtMaNV.getText()
                    + "\" \"đã\" tồn tại!", "Thêm nhân viên", MsgBox.CanhBao);
            this.txtMaNV.setBackground(Color.red);
        }
    }

    // Cập nhật thông tin nhân viên
    private void Update() {
        int index = findList(txtMaNV.getText());
        if (index > -1) {
            // Kiểm tra danh sách tồn tại => cập nhật
            NhanVien nhanvien = this.getForm();
            if (nhanvien != null) {
                if (dao.Update(nhanvien)) {
                    // Cập nhật thông tin nhân viên trên "database"
                    list.set(index, nhanvien);
                    if (nhanvien.getMatKhau().equals(Author.user.getMatKhau())) {
                        System.out.println("Thay doi ca nhan");
                        Author.user = nhanvien;
                    }
                    MsgBox.alert(this, "Đã \"sửa\" nhân viên: "
                            + txtMaNV.getText(), "Sửa nhân viên", MsgBox.ThongTin);

                    this.ClearForm(); // Xóa form sau thông báo
                    this.fillTable(); // Làm mới dữ liệu
                    this.UpdateStatus(); // Cập nhật các nút điều hướng
                    this.clearBgrTxtForm(); // Xóa background txt form
                } else {
                    System.out.println("Khong duoc cap nhat nhan vien nay!");
                }
            }
        } else {
            MsgBox.alert(this, "Mã nhân viên không tồn tại!",
                    "Sửa nhân viên", MsgBox.CanhBao);
            this.txtMaNV.setBackground(Color.red);
        }
    }

    // Xóa thông tin nhân viên
    private void Delete() {
        row = this.findList(this.txtMaNV.getText());
        if (row > -1) {
            boolean OK = 0 == MsgBox.confirm(this, "Xác nhận xóa nhân viên: "
                    + this.txtMaNV.getText(), "Xóa người dùng", MsgBox.CanhBao);
            if (OK) {
                // Kiểm tra tồn tại và xóa trên dữ liệu trên "database"
                if (dao.Delete(txtMaNV.getText())) {
                    list.remove(row); // Xóa trong danh sách sau thao tác "database"
                    MsgBox.alert(this, "Đã \"xóa\" nhân viên: "
                            + txtMaNV.getText(), "Xóa nhân viên", MsgBox.ThongTin);
                    /**
                     * Xem lại các thông tin tiếp theo
                     * ........................... Nếu danh ở vị trí cuối: "row
                     * = list.size() -1"
                     */
                    int index = list.size() - 1;
                    if (index > -1) {
                        this.setForm(list.get(row = row > index ? index : row));
                    } else {
                        this.ClearForm();
                    }
                    this.clearBgrTxtForm();
                    this.fillTable();
                } else {
                    MsgBox.alert(this, "Không thể xóa nhân viên đang tồn tại khóa học",
                            "Xóa nhân viên", MsgBox.BaoLoi);
                    this.txtMaNV.setBackground(Color.YELLOW);
                }
            }
        } else { // Nhân viên không tồn tại
            MsgBox.alert(this, "Mã nhân viên \"không\" tồn tại!",
                    "Xóa nhân viên", MsgBox.CanhBao);
            this.txtMaNV.setBackground(Color.red);
        }
        this.UpdateStatus();
    }

    // Xóa thông tin trên form
    private void ClearForm() {
        this.txtMaNV.setText(null);
        this.txtMatKhauNV.setText(null);
        this.txtXacNhanMK.setText(null);
        this.txtHoVaTen.setText(null);
        this.txtTimKiem.setText(null);
        this.txtEmail.setText(null);
        this.rdoNhanVien.setSelected(true);
        this.clearBgrTxtForm();
    }

    // Hiển thị thông tin nhân viên lên form
    private void setForm(NhanVien nv) {
        this.txtMaNV.setText(nv.getMaNV());
        this.txtMatKhauNV.setText(nv.getMatKhau());
        this.txtXacNhanMK.setText(nv.getMatKhau());
        this.txtHoVaTen.setText(nv.getHoTen());
        this.txtEmail.setText(nv.getEmail());
        this.rdoTruongPhong.setSelected(nv.isVaiTro());
        this.rdoNhanVien.setSelected(!nv.isVaiTro());
    }

    @SuppressWarnings("deprecation") // Lấy thông tin form nhân viên
    private NhanVien getForm() {
        this.clearBgrTxtForm();
        // Lấy thông tin dữ liệu
        NhanVien nv = new NhanVien(txtMaNV.getText().trim());
        String tenHo = txtHoVaTen.getText();
        String email = txtEmail.getText();
        String mk1 = txtMatKhauNV.getText();
        String mk2 = txtXacNhanMK.getText();
        boolean vaiTro = rdoTruongPhong.isSelected();

        // Kiểm tra tính hợp lệ dữ liệu
        if (!Validate.ValString(this, Validate.KI_TU_DAC_BIET,
                nv.getMaNV(), 4, 20, "Mã không được chứa kí tự đặc biệt!")) {
            this.txtMaNV.setBackground(Color.YELLOW);
            return null;
        }
        if (!Validate.ValString(this, Validate.MAT_KHAU, nv.getMaNV(), 3, 20)) {
            this.txtMatKhauNV.setBackground(Color.YELLOW);
            return null;
        }
        if (!mk2.equals(mk1)) {
            MsgBox.alert(this, "Mật khẩu không trùng mật khẩu trước",
                    "Cảnh báo mật khẩu nhập lại", MsgBox.CanhBao);
            this.txtXacNhanMK.setBackground(Color.YELLOW);
            return null;
        }
        if (!Validate.ValString(this, Validate.HO_VA_TEN, tenHo, 5, 50,
                "Tên không được chứa số!")) {
            this.txtHoVaTen.setBackground(Color.YELLOW);
            return null;
        }
        if (!Validate.ValString(this, Validate.EMAIL, email, 10, 50,
                "Không đúng định dạng email!")) {
            this.txtEmail.setBackground(Color.YELLOW);
            return null;
        }

        // Thêm các thông tin vào đối tượng nhân viên
        nv.setHoTen(tenHo);
        nv.setMatKhau(mk1);
        nv.setEmail(email);
        nv.setVaiTro(vaiTro);
        return nv;
    }

    // Thể hiện thông tin dữ liệu của danh sách
    private void fillTable() {
        model = (DefaultTableModel) this.tblNhanVien.getModel();
        model.setRowCount(0);
        if (!list.isEmpty()) {
            // Kiểm tra danh sách tồn tại và duyệt mảng
            list.forEach((x) -> {
                Object[] rowData = {x.getMaNV(), "..........", x.getHoTen(),
                    x.getEmail(), x.isVaiTro() ? "Trưởng phòng" : "Nhân viên"};
                model.addRow(rowData);
            });
        }
    }

    // Hiển thị thông tin theo vị trí danh sách
    private void Directional(int row) {
        NhanVien nv = list.get(row);
        if (row >= 0) {
            this.setForm(nv);
            this.tblNhanVien.setRowSelectionInterval(row, row);
            this.UpdateStatus();
        }
        // Chỉnh điều hướng "next" & "previous" trên form
        if (row == 0) {
            this.bntPrev.setEnabled(false);
        } else if (row == list.size() - 1) {
            this.bntNext.setEnabled(false);
        } else {
            this.bntPrev.setEnabled(true);
            this.bntNext.setEnabled(true);
        }
        if (Author.isManager()) {
            this.clearBgrTxtForm();
        }
    }

    // Chỉnh sửa thao tác trên form
    private void UpdateStatus() {
        int size = list.size(); // Kiểm tra điều kiện danh sách + vị trí
        boolean check = row > -1 && row < size;
        // Các nút trên form 
        this.txtMaNV.setEditable(!check);
        this.bntThem.setEnabled(!check);
        this.bntSua.setEnabled(check);
        this.bntXoa.setEnabled(check);
        // Các nút điều hướng
        this.bntFirst.setEnabled(check);
        this.bntPrev.setEnabled(check && row > 0);
        this.bntNext.setEnabled(check && row < --size);
        this.bntEnd.setEnabled(check);
    }

    // Xóa màu nền trên txt
    private void clearBgrTxtForm() {
        this.txtMaNV.setBackground(null);
        this.txtMatKhauNV.setBackground(null);
        this.txtXacNhanMK.setBackground(null);
        this.txtHoVaTen.setBackground(null);
        this.txtEmail.setBackground(null);
    }

    //  Xem thông tin tạo vị trí bảng đã chọn
    private void clickTable() {
        this.row = this.tblNhanVien.getSelectedRow();
        this.row = this.findList(tblNhanVien.getValueAt(row, 0).toString());
        this.setForm(list.get(row));
        this.tabsQuanLyNH.setSelectedIndex(0);
        this.clearBgrTxtForm();
        this.UpdateStatus();
    }

    // Tìm phần tử trùng lặp đầu tiên trong danh sách
    private int findList(String code) {
        if (!list.isEmpty()) {
            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).getMaNV().equalsIgnoreCase(code)) {
                    return row = i;
                }
            }
        }
        return -1;
    }

    // Kiểm tra phân loại người dùng
    private void CheckStaff(boolean check, int code) {
        if (code != 8 && code != 10) {
            NhanVien x = Author.user;
            if (Author.isLogin() && check) {
                if (!x.isVaiTro()) {
                    NhanVien y = list.get(row);
                    check = !y.getMaNV().equals(x.getMaNV());
                    if (!y.getMatKhau().equals(x.getMatKhau()) || check) {
                        MsgBox.alert(this, "Bạn chỉ được thay đổi mật khẩu của cá nhân",
                                "Thay thay mật khẩu", MsgBox.ThongTin);
                        this.txtMatKhauNV.setText(y.getMatKhau());
                        this.txtXacNhanMK.setText(y.getMatKhau());
                    }
                }
            }
        }
    }
}
