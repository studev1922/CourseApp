/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.course.views;

import java.awt.Color;
import java.awt.Component;
import java.sql.Date;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

import com.course.dao.ChuyenDeDAO;
import com.course.dao.KhoaHocDAO;
import com.course.dao.NhanVienDAO;
import com.course.entites.ChuyenDe;
import com.course.entites.KhoaHoc;
import com.course.model.Author;
import com.course.model.MsgBox;
import com.course.model.Sqlbase;
import com.course.model.Util;
import com.course.model.Validate;
import com.course.model.excel;

/**
 *
 * @author abc
 */
public final class KhoaHocJFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form KhoaHocJFrame
     *
     * @param component
     */
    public KhoaHocJFrame(Component component) {
        if (Author.isLogin()) {
            initComponents();
            this.initData(component);
        } else {
            int answer = MsgBox.confirm(component, "Bạn chưa đăng nhập tài khoản!\n"
                    + "Bạn có muốn tới trang đăng nhập?",
                    "Chưa đăng nhập tài khoản.", MsgBox.BaoLoi);
            if (answer == 0) {
                this.dispose();
                new DangNhapJDialog(this, true).setVisible(true);
            } else {
                System.exit(0);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlKH = new javax.swing.JPanel();
        cboKH = new javax.swing.JComboBox<>();
        tabsQuanLyKH = new javax.swing.JTabbedPane();
        pnlCapNhatKH = new javax.swing.JPanel();
        spnGhiChuNH = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        bntThem = new javax.swing.JButton();
        bntSua = new javax.swing.JButton();
        bntXoa = new javax.swing.JButton();
        bntMoi = new javax.swing.JButton();
        bntFirst = new javax.swing.JButton();
        bntPrev = new javax.swing.JButton();
        bntNext = new javax.swing.JButton();
        bntEnd = new javax.swing.JButton();
        lblChuyenDe = new javax.swing.JLabel();
        lblHocPhi = new javax.swing.JLabel();
        lblNgayTao = new javax.swing.JLabel();
        lblThoiLuong = new javax.swing.JLabel();
        lblNguoiTao = new javax.swing.JLabel();
        lblNgayKG = new javax.swing.JLabel();
        txtChuyenDe = new javax.swing.JTextField();
        txtHocPhi = new javax.swing.JTextField();
        txtNgayTao = new javax.swing.JTextField();
        txtThoiLuong = new javax.swing.JTextField();
        txtNguoiTao = new javax.swing.JTextField();
        txtNgayKG = new javax.swing.JTextField();
        pnlDanhSachNH = new javax.swing.JPanel();
        spnDanhSachNH = new javax.swing.JScrollPane();
        tblKhoaHoc = new javax.swing.JTable();
        txtTimKiem = new javax.swing.JTextField();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý khóa học");

        pnlKH.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "KHÓA HỌC", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 1, 14), java.awt.Color.red)); // NOI18N

        cboKH.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cboKHPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        javax.swing.GroupLayout pnlKHLayout = new javax.swing.GroupLayout(pnlKH);
        pnlKH.setLayout(pnlKHLayout);
        pnlKHLayout.setHorizontalGroup(
            pnlKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlKHLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboKH, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlKHLayout.setVerticalGroup(
            pnlKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlKHLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabsQuanLyKH.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        txtGhiChu.setColumns(20);
        txtGhiChu.setRows(5);
        txtGhiChu.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ghi chú", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 0, 12))); // NOI18N
        spnGhiChuNH.setViewportView(txtGhiChu);

        bntThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Add.png"))); // NOI18N
        bntThem.setText("Thêm");
        bntThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntThemActionPerformed(evt);
            }
        });

        bntSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Update.png"))); // NOI18N
        bntSua.setText("Sửa");
        bntSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSuaActionPerformed(evt);
            }
        });

        bntXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Delete.png"))); // NOI18N
        bntXoa.setText("Xóa");
        bntXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntXoaActionPerformed(evt);
            }
        });

        bntMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/info.png"))); // NOI18N
        bntMoi.setText("Mới");
        bntMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntMoiActionPerformed(evt);
            }
        });

        bntFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/First.png"))); // NOI18N
        bntFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntFirstActionPerformed(evt);
            }
        });

        bntPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Prev.png"))); // NOI18N
        bntPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPrevActionPerformed(evt);
            }
        });

        bntNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Next.png"))); // NOI18N
        bntNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntNextActionPerformed(evt);
            }
        });

        bntEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/End.png"))); // NOI18N
        bntEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEndActionPerformed(evt);
            }
        });

        lblChuyenDe.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblChuyenDe.setText("Chuyên đề");

        lblHocPhi.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblHocPhi.setText("Học phí chuyên đề");

        lblNgayTao.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblNgayTao.setText("Ngày tạo chuyên đề");

        lblThoiLuong.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblThoiLuong.setText("Thời lượng chuyên đề");

        lblNguoiTao.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblNguoiTao.setText("Người tạo chuyên đề");

        lblNgayKG.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblNgayKG.setText("Ngày khai giảng chuyên đề (năm/ tháng / ngày)");

        txtChuyenDe.setEditable(false);
        txtChuyenDe.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtChuyenDe.setForeground(java.awt.Color.red);

        txtHocPhi.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtNgayTao.setEditable(false);
        txtNgayTao.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtThoiLuong.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtNguoiTao.setEditable(false);
        txtNguoiTao.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtNgayKG.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtNgayKG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNgayKGKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlCapNhatKHLayout = new javax.swing.GroupLayout(pnlCapNhatKH);
        pnlCapNhatKH.setLayout(pnlCapNhatKHLayout);
        pnlCapNhatKHLayout.setHorizontalGroup(
            pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCapNhatKHLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnGhiChuNH)
                    .addGroup(pnlCapNhatKHLayout.createSequentialGroup()
                        .addComponent(bntThem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntSua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntMoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                        .addComponent(bntFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntPrev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntEnd))
                    .addGroup(pnlCapNhatKHLayout.createSequentialGroup()
                        .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtChuyenDe, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChuyenDe, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblHocPhi, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(txtHocPhi)))
                    .addGroup(pnlCapNhatKHLayout.createSequentialGroup()
                        .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtNgayTao, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNgayTao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblThoiLuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtThoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCapNhatKHLayout.createSequentialGroup()
                        .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtNguoiTao, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNguoiTao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblNgayKG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNgayKG, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pnlCapNhatKHLayout.setVerticalGroup(
            pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCapNhatKHLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblChuyenDe, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(lblHocPhi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChuyenDe, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHocPhi, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblNgayTao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblThoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNgayTao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtThoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblNguoiTao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNgayKG, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNguoiTao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgayKG, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(spnGhiChuNH, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(pnlCapNhatKHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bntThem)
                    .addComponent(bntFirst)
                    .addComponent(bntPrev)
                    .addComponent(bntNext)
                    .addComponent(bntEnd)
                    .addComponent(bntSua)
                    .addComponent(bntXoa)
                    .addComponent(bntMoi))
                .addContainerGap())
        );

        tabsQuanLyKH.addTab("CẬP NHẬT", pnlCapNhatKH);

        tblKhoaHoc.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        tblKhoaHoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ KH", "THỜI LƯỢNG", "HỌC PHÍ", "KHAI GIẢNG", "TẠO BỞI", "NGÀY TẠO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblKhoaHoc.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblKhoaHoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKhoaHocMouseClicked(evt);
            }
        });
        spnDanhSachNH.setViewportView(tblKhoaHoc);

        txtTimKiem.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtTimKiem.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tim kiếm", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 1, 12))); // NOI18N
        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });

        btnExport.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/excel.png"))); // NOI18N
        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDanhSachNHLayout = new javax.swing.GroupLayout(pnlDanhSachNH);
        pnlDanhSachNH.setLayout(pnlDanhSachNHLayout);
        pnlDanhSachNHLayout.setHorizontalGroup(
            pnlDanhSachNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachNHLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDanhSachNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnDanhSachNH, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                    .addGroup(pnlDanhSachNHLayout.createSequentialGroup()
                        .addComponent(txtTimKiem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlDanhSachNHLayout.setVerticalGroup(
            pnlDanhSachNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDanhSachNHLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDanhSachNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTimKiem)
                    .addComponent(btnExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnDanhSachNH, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsQuanLyKH.addTab("DANH SÁCH", pnlDanhSachNH);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlKH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabsQuanLyKH))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabsQuanLyKH)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntThemActionPerformed
        this.Insert();
    }//GEN-LAST:event_bntThemActionPerformed

    private void bntSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSuaActionPerformed
        this.Update();
    }//GEN-LAST:event_bntSuaActionPerformed

    private void bntXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntXoaActionPerformed
        if (Power())
            this.Delete();
    }//GEN-LAST:event_bntXoaActionPerformed

    private void bntMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntMoiActionPerformed
        this.row = -1;
        this.clearForm();
        this.UpdateStatus();
    }//GEN-LAST:event_bntMoiActionPerformed

    private void bntFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntFirstActionPerformed
        this.Directional(row = 0);
    }//GEN-LAST:event_bntFirstActionPerformed

    private void bntPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPrevActionPerformed
        this.Directional(row > 0 ? --row : 0);
    }//GEN-LAST:event_bntPrevActionPerformed

    private void bntNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNextActionPerformed
        row = listKH.isEmpty() ? -1 : ++row;
        this.Directional(row);
    }//GEN-LAST:event_bntNextActionPerformed

    private void bntEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEndActionPerformed
        row = listKH.isEmpty() ? -1 : listKH.size() - 1;
        this.Directional(row);
    }//GEN-LAST:event_bntEndActionPerformed

    private void tblKhoaHocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKhoaHocMouseClicked
        if (evt.getClickCount() > 1)
            this.clickTable();
    }//GEN-LAST:event_tblKhoaHocMouseClicked

    private void cboKHPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cboKHPopupMenuWillBecomeInvisible
        fillTableModel(indexCD = cboKH.getSelectedIndex());
        this.lblChuyenDe.setText(listCD.get(indexCD).getTenCD());
    }//GEN-LAST:event_cboKHPopupMenuWillBecomeInvisible

    private void txtNgayKGKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNgayKGKeyReleased
        String text = txtNgayKG.getText();
        int l = text.length();
        if (l == 4 || l == 7) {
            text += "/";
        }
        if (l > 10) {
            text = text.substring(0, 9);
        }
        txtNgayKG.setText(text);
    }//GEN-LAST:event_txtNgayKGKeyReleased

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        if (Author.isLogin()) {
            String fT = txtTimKiem.getText();
            String sql = Sqlbase.sqlKH.SQL_SELECT
                    + " where MaKH like N'%"
                    + fT + "%' or HocPhi like N'%"
                    + fT + "%' or ThoiLuong like '%"
                    + fT + "%' or NgayKG like N'%" + fT + "%'";
            listKH = daoKH.SelectBySql(sql);
            this.fillTableModel(indexCD);
        }
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        try {
            Util.saveToExcel(tblKhoaHoc);
        } catch (Exception e) {
            MsgBox.alert(btnExport, "Export failed by: " + e.getMessage(), "Export to excel", MsgBox.BaoLoi);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KhoaHocJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new KhoaHocJFrame(null).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntEnd;
    private javax.swing.JButton bntFirst;
    private javax.swing.JButton bntMoi;
    private javax.swing.JButton bntNext;
    private javax.swing.JButton bntPrev;
    private javax.swing.JButton bntSua;
    private javax.swing.JButton bntThem;
    private javax.swing.JButton bntXoa;
    private javax.swing.JButton btnExport;
    private javax.swing.JComboBox<String> cboKH;
    private javax.swing.JLabel lblChuyenDe;
    private javax.swing.JLabel lblHocPhi;
    private javax.swing.JLabel lblNgayKG;
    private javax.swing.JLabel lblNgayTao;
    private javax.swing.JLabel lblNguoiTao;
    private javax.swing.JLabel lblThoiLuong;
    private javax.swing.JPanel pnlCapNhatKH;
    private javax.swing.JPanel pnlDanhSachNH;
    private javax.swing.JPanel pnlKH;
    private javax.swing.JScrollPane spnDanhSachNH;
    private javax.swing.JScrollPane spnGhiChuNH;
    private javax.swing.JTabbedPane tabsQuanLyKH;
    private javax.swing.JTable tblKhoaHoc;
    private javax.swing.JTextField txtChuyenDe;
    private javax.swing.JTextArea txtGhiChu;
    private javax.swing.JTextField txtHocPhi;
    private javax.swing.JTextField txtNgayKG;
    private javax.swing.JTextField txtNgayTao;
    private javax.swing.JTextField txtNguoiTao;
    private javax.swing.JTextField txtThoiLuong;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    // Biến toàn cục thao tác dữ liệu
    private final ChuyenDeDAO daoCD = new ChuyenDeDAO(); // Thao tác chuyên đề
    private final KhoaHocDAO daoKH = new KhoaHocDAO(); // Thao tác khóa học
    private List<ChuyenDe> listCD = new ArrayList<>();
    private List<KhoaHoc> listKH = new LinkedList<>();
    private DefaultTableModel modelTable = null; // Model xét dữ liệu bảng
    private int indexCD = -1; // Thể hiện vị trí chuyên đê
    private int row = -1; // Thể hiện vị trí khóa học

    // Tải dữ liệu lần đầu từ database
    private void initData(Component c) {
        listCD = daoCD.SelectAll();
        listKH = daoKH.SelectAll();
        this.SetComboBox();
        if (!listCD.isEmpty()) {
            this.cboKH.setSelectedIndex(indexCD = 0);
            this.fillTableModel(indexCD);
        }
        this.setIconImage(((JFrame) c).getIconImage());
        this.setLocationRelativeTo(c);
        this.UpdateStatus();
        this.tblKhoaHoc.setAutoCreateRowSorter(true);
    }

    // Quản lý vai trò nhân viên
    private boolean Power() {
        boolean nv = Author.isManager();
        if (!nv) {
            MsgBox.alert(this, "Bạn là nhân viên không được xóa, và sửa vai trò!",
                    "Vai trò: " + (nv ? "Trưởng phòng" : "Nhân viên"), MsgBox.CanhBao);
        }
        return nv;
    }

    // Thêm dữ liệu vào database
    private void Insert() {
        // Kiểm tra không tồn tại
        KhoaHoc khoaHoc = this.getForm(true);
        if (khoaHoc != null) {
            // Lấy thông tin khóa học và thêm dữ liệu
            if (daoKH.Insert(khoaHoc)) {
                listKH.add(khoaHoc);
                MsgBox.alert(this, "Đã \"thêm\" mới khóa học.",
                        "Thêm khóa học", MsgBox.ThongTin);

                this.clearForm(); // Xóa form
                this.fillTableModel(indexCD);// Xem thông tin
                this.UpdateStatus(); // Cập nhật điều hướng
                this.clearBgrTxtForm(); // Xóa txt background
            } else {
                MsgBox.alert(this, "Không thể thêm khóa học đang tồn tại!",
                        "Thêm khóa học", MsgBox.CanhBao);
            }
        }
    }

    private void Update() {
        int index = findListKH(listKH.get(row).getMaKH());
        if (index > -1) {
            // Kiểm tra danh sách tồn tại => cập nhật
            KhoaHoc khoaHoc = this.getForm(false);
            if (daoKH.Update(khoaHoc)) {
                // Cập nhật thông tin khóa học trên "database"
                if (khoaHoc != null) {
                    listKH.set(index, khoaHoc);
                    MsgBox.alert(this, "Đã \"sửa\" khóa học: ",
                            "Sửa khóa học", MsgBox.ThongTin);

                    this.clearForm(); // Xóa form sau thông báo
                    this.fillTableModel(indexCD);// xem theo mã chuyên đề
                    this.UpdateStatus(); // Cập nhật các nút điều hướng
                    this.clearBgrTxtForm(); // Xóa background txt form
                }
            } else {
                System.out.println("Khong duoc cap nhat khoa Hoc nay!");
            }
        }
    }

    private void Delete() {
        int maKH = this.listKH.get(row).getMaKH();
        row = this.findListKH(maKH);
        if (row > -1) {
            // Kiểm tra tồn tại và xóa trên dữ liệu trên "database"
            if (daoKH.Delete(maKH)) {
                listKH.remove(row); // Xóa trong danh sách sau thao tác "database"
                MsgBox.alert(this, "Đã \"xóa\" khóa học: ",
                        "Xóa khóa học", MsgBox.ThongTin);
                /**
                 * Xem lại các thông tin tiếp theo ...........................
                 * Nếu danh ở vị trí cuối: "row = list.size() -1"
                 */
                int index = listKH.size() - 1;
                if (index > -1) {
                    this.setForm(listKH.get(row = row > index ? index : row));
                } else {
                    this.clearForm();
                }
                this.clearBgrTxtForm();
                this.fillTableModel(indexCD);
                this.Directional(row);
            } else {
                MsgBox.alert(this, "Lỗi xóa thông tin khóa học",
                        "Xóa khóa học", MsgBox.BaoLoi);
            }
        } else {
            System.out.println(row);
        }
        this.UpdateStatus();
    }

    private KhoaHoc getForm(boolean upcode) {

        this.clearBgrTxtForm();
        KhoaHoc kh = new KhoaHoc();

        boolean check = !listKH.isEmpty();
        // Lấy thông tin khách hàng
        int maKH = check ? listKH.get(listKH.size() - 1).getMaKH() : 0;
        int thoiluong = Validate.ConvertInt(txtThoiLuong.getText());
        double hocPhi = Validate.ConvertDouble(txtHocPhi.getText());
        Date ngayKG = Validate.ConvertDate(txtNgayKG.getText(), this,
                604800000L);
        Date ngayTK = new Date(new java.util.Date().getTime());
        String ghiChu = txtGhiChu.getText();
        String maCd = listCD.get(indexCD).getMaCD();

        // Kiểm tra tính hợp lệ
        if (ngayKG == null) {
            MsgBox.alert(this, "Bạn cần nhập đúng định dạng ngày!",
                    "Nhập liệu ngày khai giảng", MsgBox.CanhBao);
            this.txtNgayKG.setBackground(Color.YELLOW);
            return null;
        } else {
            this.txtNgayKG.setText(ngayKG.toString());
            this.txtNgayKG.setBackground(null);
        }
        if (hocPhi < 0) {
            MsgBox.alert(this, "Cần nhập giá trị số thực cho học phí!",
                    "Học phí khóa học", MsgBox.CanhBao);
            this.txtHocPhi.setBackground(Color.YELLOW);
            this.txtHocPhi.setText(null);
            return null;
        }
        if (thoiluong < 0) {
            MsgBox.alert(this, "Cần nhập giá trị số nguyên cho thời lượng học!",
                    "Thời lượng khóa học", MsgBox.CanhBao);
            this.txtThoiLuong.setBackground(Color.YELLOW);
            this.txtThoiLuong.setText(null);
            return null;
        }
        if (255 < ghiChu.length()) {
            MsgBox.alert(this, "Ghi chú nằm trong khoảng 255 kí tự!",
                    "Ghi chú thông tin", MsgBox.CanhBao);
            this.txtGhiChu.setBackground(Color.YELLOW);
            return null;
        }

        // Sửa thông tin khách hàng
        kh.setMaKH(upcode ? ++maKH : maKH);
        kh.setThoiLuong(thoiluong);
        kh.setHocPhi(hocPhi);
        kh.setNgayKG(ngayKG);
        kh.setGhiChu(ghiChu);
        kh.setMaCD(maCd);
        kh.setNgayTao(ngayTK);
        kh.setMaNV(Author.user.getMaNV());
        return kh;
    }

    private void SetComboBox() {
        listCD.forEach((x) -> cboKH.addItem(x.getTenCD()));
    }

    private void fillTableModel(int index) {
        modelTable = (DefaultTableModel) tblKhoaHoc.getModel();
        modelTable.setRowCount(0);

        if (!listKH.isEmpty()) {
            listKH.forEach((x) -> {
                if (x.getMaCD().equalsIgnoreCase(listCD.get(index).getMaCD())) {
                    String tenNV = new NhanVienDAO().SelectById(x.getMaNV()).getHoTen();
                    Object[] rowData = {x.getMaKH(), x.getThoiLuong(), x.getHocPhi(),
                        x.getNgayKG(), tenNV, x.getNgayTao()};
                    modelTable.addRow(rowData);
                }
            });
        }
    }

    private void clearForm() {
        this.txtChuyenDe.setText(null);
        this.txtHocPhi.setText(null);
        this.txtNgayTao.setText(null);
        this.txtThoiLuong.setText(null);
        this.txtNguoiTao.setText(null);
        this.txtNgayKG.setText(null);
    }

    private void setForm(KhoaHoc kh) {
        this.txtChuyenDe.setText(listCD.get(indexCD).getTenCD());
        this.txtHocPhi.setText(kh.getHocPhi() + "");
        this.txtNgayTao.setText(kh.getNgayTao() + "");
        this.txtThoiLuong.setText(kh.getThoiLuong() + "");
        this.txtNguoiTao.setText(kh.getMaNV());
        this.txtNgayKG.setText(kh.getNgayKG() + "");
        this.txtGhiChu.setText(kh.getGhiChu());
    }

    // Hiển thị thông tin theo vị trí danh sách
    private void Directional(int row) {
        if (!listKH.isEmpty()) {
            int index = this.findListCD(listKH.get(row).getMaCD());

            if (row >= 0) {
                this.setForm(listKH.get(row));
                this.UpdateStatus();
            }
            // Chỉnh điều hướng "next" & "previous" trên form
            if (row == 0) {
                this.bntPrev.setEnabled(false);
            } else if (row == listKH.size() - 1) {
                this.bntNext.setEnabled(false);
            } else {
                this.bntPrev.setEnabled(true);
                this.bntNext.setEnabled(true);
            }
            this.cboKH.setSelectedIndex(index = index < 0 ? 0 : index);
            this.txtChuyenDe.setText(cboKH.getSelectedItem().toString());
            this.fillTableModel(index);
        } else {
            this.row = -1;
            this.UpdateStatus();
        }
        this.clearBgrTxtForm();
    }

    // Chỉnh sửa thao tác trên form
    private void UpdateStatus() {
        int size = listKH.size(); // Kiểm tra điều kiện danh sách + vị trí
        boolean check = row > -1 && row < size;
        // Các nút trên form 
        this.bntThem.setEnabled(!check);
        this.bntSua.setEnabled(check);
        this.bntXoa.setEnabled(check);
        // Các nút điều hướng
        this.bntFirst.setEnabled(check);
        this.bntPrev.setEnabled(check && row > 0);
        this.bntNext.setEnabled(check && row < --size);
        this.bntEnd.setEnabled(check);
    }

    // Xóa màu nền trên txt
    private void clearBgrTxtForm() {
        this.txtHocPhi.setBackground(null);
        this.txtThoiLuong.setBackground(null);
        this.txtNgayKG.setBackground(null);
        this.txtGhiChu.setBackground(null);
    }

    //  Xem thông tin tạo vị trí bảng đã chọn
    private void clickTable() {
        // Lấy mã khóa học 
        int maKH = tblKhoaHoc.getSelectedRow();
        String value = tblKhoaHoc.getValueAt(maKH, 0).toString();
        maKH = Validate.ConvertInt(value);
        // Xem các thông tin từ mã
        this.row = findListKH(maKH);
        this.setForm(listKH.get(row));
        this.tabsQuanLyKH.setSelectedIndex(0);
        this.clearBgrTxtForm();
        this.UpdateStatus();
    }

    // Tìm phần tử trùng lặp đầu tiên trong danh sách
    private int findListKH(int code) {
        if (!listKH.isEmpty()) {
            for (int i = 0; i < listKH.size(); i++) {
                if (listKH.get(i).getMaKH() == code) {
                    return row = i;
                }
            }
        }
        return -1;
    }

    // Tìm phần tử trùng lặp theo mã cd
    private int findListCD(String code) {
        if (!listCD.isEmpty()) {
            for (int i = 0; i < listCD.size(); i++) {
                if (listCD.get(i).getMaCD().equalsIgnoreCase(code)) {
                    return i;
                }
            }
        }
        return -1;
    }
}
