/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.course.views;

import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

import com.course.dao.ChuyenDeDAO;
import com.course.entites.ChuyenDe;
import com.course.model.Author;
import com.course.model.MsgBox;
import com.course.model.Sqlbase;
import com.course.model.Util;
import com.course.model.Validate;
import com.course.model.XImage;

/**
 *
 * @author abc
 */
public final class ChuyenDeJFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ChuyenDeJFrame
     *
     * @param component
     */
    public ChuyenDeJFrame(Component component) {
        if (Author.isLogin()) {
            initComponents();
            this.initData(component);
        } else {
            int answer = MsgBox.confirm(component, "Bạn chưa đăng nhập tài khoản!\n"
                    + "Bạn có muốn tới trang đăng nhập?",
                    "Chưa đăng nhập tài khoản.", MsgBox.BaoLoi);
            if (answer == 0) {
                this.dispose();
                new DangNhapJDialog(this, true).setVisible(true);
            } else {
                System.exit(0);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTittleCD = new javax.swing.JLabel();
        tabsChuyenDe = new javax.swing.JTabbedPane();
        pnlCapNhatCD = new javax.swing.JPanel();
        lblTieuDe = new javax.swing.JLabel();
        lblAnh = new javax.swing.JLabel();
        lblMaCD = new javax.swing.JLabel();
        lblTenCD = new javax.swing.JLabel();
        lblThoiLuong = new javax.swing.JLabel();
        lblHocPhi = new javax.swing.JLabel();
        txtMaCD = new javax.swing.JTextField();
        txtTenCD = new javax.swing.JTextField();
        txtThoiLuong = new javax.swing.JTextField();
        txtHocPhi = new javax.swing.JTextField();
        speMoTa = new javax.swing.JScrollPane();
        txtMoTa = new javax.swing.JTextArea();
        bntThem = new javax.swing.JButton();
        bntSua = new javax.swing.JButton();
        bntXoa = new javax.swing.JButton();
        bntMoi = new javax.swing.JButton();
        bntFirst = new javax.swing.JButton();
        bntPrev = new javax.swing.JButton();
        bntNext = new javax.swing.JButton();
        bntEnd = new javax.swing.JButton();
        pnlDanhSachCD = new javax.swing.JPanel();
        pnlSearch = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        btnExport = new javax.swing.JButton();
        speDanhSachCD = new javax.swing.JScrollPane();
        tblDSCD = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EduSys - Quản lý chuyên đề");
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.NW_RESIZE_CURSOR));

        lblTittleCD.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        lblTittleCD.setForeground(java.awt.Color.blue);
        lblTittleCD.setText("Quản lý chuyên đề");

        tabsChuyenDe.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        lblTieuDe.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        lblTieuDe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTieuDe.setText("Logo chuyên đề");

        lblAnh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAnh.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblAnh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAnhMouseClicked(evt);
            }
        });

        lblMaCD.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblMaCD.setText("Mã chuyên đề");

        lblTenCD.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblTenCD.setText("Tên chuyên đề");

        lblThoiLuong.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblThoiLuong.setText("Thời lượng (giờ)");

        lblHocPhi.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblHocPhi.setText("Học phí");

        txtMaCD.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtTenCD.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtThoiLuong.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtHocPhi.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtMoTa.setColumns(20);
        txtMoTa.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtMoTa.setRows(5);
        txtMoTa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mô tả chuyên đề", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 0, 12))); // NOI18N
        speMoTa.setViewportView(txtMoTa);

        bntThem.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        bntThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Add.png"))); // NOI18N
        bntThem.setText("Thêm");
        bntThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntThemActionPerformed(evt);
            }
        });

        bntSua.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        bntSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Update.png"))); // NOI18N
        bntSua.setText("Sửa");
        bntSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSuaActionPerformed(evt);
            }
        });

        bntXoa.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        bntXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Delete.png"))); // NOI18N
        bntXoa.setText("Xóa");
        bntXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntXoaActionPerformed(evt);
            }
        });

        bntMoi.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        bntMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/info.png"))); // NOI18N
        bntMoi.setText("Mới");
        bntMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntMoiActionPerformed(evt);
            }
        });

        bntFirst.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        bntFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/First.png"))); // NOI18N
        bntFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntFirstActionPerformed(evt);
            }
        });

        bntPrev.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        bntPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Prev.png"))); // NOI18N
        bntPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPrevActionPerformed(evt);
            }
        });

        bntNext.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        bntNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Next.png"))); // NOI18N
        bntNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntNextActionPerformed(evt);
            }
        });

        bntEnd.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        bntEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/End.png"))); // NOI18N
        bntEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEndActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCapNhatCDLayout = new javax.swing.GroupLayout(pnlCapNhatCD);
        pnlCapNhatCD.setLayout(pnlCapNhatCDLayout);
        pnlCapNhatCDLayout.setHorizontalGroup(
            pnlCapNhatCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCapNhatCDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCapNhatCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCapNhatCDLayout.createSequentialGroup()
                        .addComponent(bntThem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntSua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntMoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bntFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntPrev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntEnd))
                    .addComponent(speMoTa, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCapNhatCDLayout.createSequentialGroup()
                        .addGroup(pnlCapNhatCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTieuDe, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlCapNhatCDLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(pnlCapNhatCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMaCD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtMaCD)
                            .addComponent(txtTenCD)
                            .addComponent(lblTenCD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtThoiLuong)
                            .addComponent(lblThoiLuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblHocPhi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtHocPhi))))
                .addGap(19, 19, 19))
        );

        pnlCapNhatCDLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bntMoi, bntSua, bntThem, bntXoa});

        pnlCapNhatCDLayout.setVerticalGroup(
            pnlCapNhatCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCapNhatCDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCapNhatCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaCD, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTieuDe, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapNhatCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCapNhatCDLayout.createSequentialGroup()
                        .addComponent(txtMaCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTenCD, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTenCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblThoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtThoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHocPhi, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHocPhi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(speMoTa, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(pnlCapNhatCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bntNext)
                    .addComponent(bntEnd)
                    .addComponent(bntThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bntSua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bntXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bntMoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bntFirst, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bntPrev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabsChuyenDe.addTab("CẬP NHẬT", pnlCapNhatCD);

        pnlSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 1, 12))); // NOI18N

        txtTimKiem.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });

        btnExport.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/excel.png"))); // NOI18N
        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchLayout = new javax.swing.GroupLayout(pnlSearch);
        pnlSearch.setLayout(pnlSearchLayout);
        pnlSearchLayout.setHorizontalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTimKiem)
                .addGap(18, 18, 18)
                .addComponent(btnExport)
                .addContainerGap())
        );
        pnlSearchLayout.setVerticalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExport))
                .addContainerGap())
        );

        tblDSCD.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        tblDSCD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ CD", "TÊN CD", "HỌC PHÍ", "THỜI LƯỢNG", "HÌNH"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDSCD.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDSCD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDSCDMouseClicked(evt);
            }
        });
        speDanhSachCD.setViewportView(tblDSCD);
        if (tblDSCD.getColumnModel().getColumnCount() > 0) {
            tblDSCD.getColumnModel().getColumn(0).setMaxWidth(120);
            tblDSCD.getColumnModel().getColumn(2).setMaxWidth(80);
            tblDSCD.getColumnModel().getColumn(3).setMaxWidth(80);
            tblDSCD.getColumnModel().getColumn(4).setMinWidth(100);
            tblDSCD.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        javax.swing.GroupLayout pnlDanhSachCDLayout = new javax.swing.GroupLayout(pnlDanhSachCD);
        pnlDanhSachCD.setLayout(pnlDanhSachCDLayout);
        pnlDanhSachCDLayout.setHorizontalGroup(
            pnlDanhSachCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachCDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDanhSachCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(speDanhSachCD, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
                    .addComponent(pnlSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlDanhSachCDLayout.setVerticalGroup(
            pnlDanhSachCDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDanhSachCDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speDanhSachCD, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsChuyenDe.addTab("DANH SÁCH", pnlDanhSachCD);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabsChuyenDe, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTittleCD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblTittleCD, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabsChuyenDe)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntThemActionPerformed
        if (Author.isLogin())
            this.Insert();
    }//GEN-LAST:event_bntThemActionPerformed

    private void bntSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSuaActionPerformed
        if (Author.isLogin())
            this.Update();
    }//GEN-LAST:event_bntSuaActionPerformed

    private void bntXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntXoaActionPerformed
        if (Author.isLogin() && Author.isManager())
            this.Delete();
        else
            MsgBox.alert(this, "chuyên đề không được xóa thông tin",
                    "Bạn là chuyên đề thực hiện thao tác", MsgBox.KhongCo);
    }//GEN-LAST:event_bntXoaActionPerformed

    private void bntMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntMoiActionPerformed
        if (Author.isLogin()) {
            this.row = -1;
            this.ClearForm();
            this.UpdateStatus();
        }
    }//GEN-LAST:event_bntMoiActionPerformed

    private void bntFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntFirstActionPerformed
        if (Author.isLogin())
            this.Directional(row = 0);
    }//GEN-LAST:event_bntFirstActionPerformed

    private void bntPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPrevActionPerformed
        if (Author.isLogin())
            this.Directional(row > 0 ? --row : 0);
    }//GEN-LAST:event_bntPrevActionPerformed

    private void bntNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNextActionPerformed
        if (Author.isLogin()) {
            row = list.isEmpty() ? -1 : ++row;
            this.Directional(row);
        }
    }//GEN-LAST:event_bntNextActionPerformed

    private void bntEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEndActionPerformed
        if (Author.isLogin()) {
            row = list.isEmpty() ? -1 : list.size() - 1;
            this.Directional(row);
        }
    }//GEN-LAST:event_bntEndActionPerformed

    private void lblAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnhMouseClicked
        if (Author.isLogin())
            this.chooserIMG();
    }//GEN-LAST:event_lblAnhMouseClicked

    private void tblDSCDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDSCDMouseClicked
        if (Author.isLogin())
            if (evt.getClickCount() > 1)
                this.clickTable();
    }//GEN-LAST:event_tblDSCDMouseClicked

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        if (Author.isLogin()) {
            String fT = txtTimKiem.getText();
            String sql = Sqlbase.sqlCD.SQL_SELECT
                    + " where MaCD like N'%"
                    + fT + "%' or TenCD like N'%"
                    + fT + "%' or HocPhi like N'%" + fT + "%'";
            list = dao.SelectBySql(sql);
            this.fillTable();
        }
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
         try {
            Util.saveToExcel(tblDSCD);
        } catch (Exception e) {
            MsgBox.alert(btnExport, "Export failed by: " + e.getMessage(), "Export to excel", MsgBox.BaoLoi);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChuyenDeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChuyenDeJFrame(null).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntEnd;
    private javax.swing.JButton bntFirst;
    private javax.swing.JButton bntMoi;
    private javax.swing.JButton bntNext;
    private javax.swing.JButton bntPrev;
    private javax.swing.JButton bntSua;
    private javax.swing.JButton bntThem;
    private javax.swing.JButton bntXoa;
    private javax.swing.JButton btnExport;
    private javax.swing.JLabel lblAnh;
    private javax.swing.JLabel lblHocPhi;
    private javax.swing.JLabel lblMaCD;
    private javax.swing.JLabel lblTenCD;
    private javax.swing.JLabel lblThoiLuong;
    private javax.swing.JLabel lblTieuDe;
    private javax.swing.JLabel lblTittleCD;
    private javax.swing.JPanel pnlCapNhatCD;
    private javax.swing.JPanel pnlDanhSachCD;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JScrollPane speDanhSachCD;
    private javax.swing.JScrollPane speMoTa;
    private javax.swing.JTabbedPane tabsChuyenDe;
    private javax.swing.JTable tblDSCD;
    private javax.swing.JTextField txtHocPhi;
    private javax.swing.JTextField txtMaCD;
    private javax.swing.JTextArea txtMoTa;
    private javax.swing.JTextField txtTenCD;
    private javax.swing.JTextField txtThoiLuong;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    // Biến toàn cục thao tác dữ liệu
    private final ChuyenDeDAO dao = new ChuyenDeDAO(); // Thao tác database
    private List<ChuyenDe> list = new LinkedList<>();
    private DefaultTableModel model = null; // Model xét dữ liệu bảng
    private File file = null; // file dùng đề chứa ảnh
    private int row = -1; // Vị trí thông tin danh sách

    // Tải dữ liệu lần đầu từ database
    private void initData(Component c) {
        list = dao.SelectAll();
        this.fillTable();
        this.UpdateStatus();
        this.setLocationRelativeTo(c);
        this.setIconImage(((JFrame) c).getIconImage());
        this.tblDSCD.setAutoCreateRowSorter(true);
    }

    // Thêm dữ liệu vào database
    private void Insert() {
        if (findList(txtMaCD.getText()) == -1) {
            // Kiểm tra không tồn tại
            ChuyenDe chuyenDe = this.getForm();
            if (chuyenDe != null) {
                // Lấy thông tin chuyên đề và thêm dữ liệu
                if (dao.Insert(chuyenDe)) {
                    list.add(chuyenDe);
                    XImage.SaveIcon(file);
                    MsgBox.alert(this, "Đã \"thêm\" mới chuyên đề.",
                            "Thêm chuyên đề", MsgBox.ThongTin);

                    this.ClearForm(); // Xóa form
                    this.fillTable(); // Xem thông tin
                    this.UpdateStatus(); // Cập nhật điều hướng
                    this.clearBgrTxtForm(); // Xóa txt background
                } else {
                    MsgBox.alert(this, "Không thể thêm chuyên đề đang tại!",
                            "Thêm chuyên đề", MsgBox.CanhBao);
                }
            }
            if (this.file != null) {
                XImage.SaveIcon(file);
            }
        } else {
            MsgBox.alert(this, "Mã chuyên đề \"" + txtMaCD.getText()
                    + "\" \"đã\" tồn tại!", "Thêm chuyên đề", MsgBox.CanhBao);
            this.txtMaCD.setBackground(Color.red);
        }
    }

    // Cập nhật thông tin chuyên đề
    private void Update() {
        int index = findList(txtMaCD.getText());
        if (index > -1) {
            // Kiểm tra danh sách tồn tại => cập nhật
            ChuyenDe chuyenDe = this.getForm();
            if (dao.Update(chuyenDe)) {
                // Cập nhật thông tin chuyên đề trên "database"
                if (chuyenDe != null) {
                    list.set(index, chuyenDe);
                    MsgBox.alert(this, "Đã \"sửa\" chuyên chuyên đề: "
                            + txtMaCD.getText(), "Sửa chuyên đề", MsgBox.ThongTin);

                    if (file != null) {
                        XImage.SaveIcon(file);
                    }
                    this.ClearForm(); // Xóa form sau thông báo
                    this.fillTable(); // Làm mới dữ liệu
                    this.UpdateStatus(); // Cập nhật các nút điều hướng
                    this.clearBgrTxtForm(); // Xóa background txt form
                }
            } else {
                System.out.println("Khong duoc cap nhat chuyen de nay!");
            }
        } else {
            MsgBox.alert(this, "Mã chuyên đề không tồn tại!",
                    "Sửa chuyên đề", MsgBox.CanhBao);
            this.txtMaCD.setBackground(Color.red);
        }
    }

    // Xóa thông tin chuyên đề
    private void Delete() {
        row = this.findList(this.txtMaCD.getText());
        if (row > -1) {
            boolean OK = 0 == MsgBox.confirm(this, "Xác nhận xóa chuyên đề: "
                    + this.txtMaCD.getText(), "Xóa người dùng", MsgBox.CanhBao);
            if (OK) {// Kiểm tra tồn tại và xóa trên dữ liệu trên "database"
                if (dao.Delete(txtMaCD.getText())) {
                    list.remove(row); // Xóa trong danh sách sau thao tác "database"
                    MsgBox.alert(this, "Đã \"xóa\" chuyên chuyên đề: "
                            + txtMaCD.getText(), "Xóa chuyên đề", MsgBox.ThongTin);
                    /**
                     * Xem lại các thông tin tiếp theo .........................
                     * Nếu danh ở vị trí cuối: "row = list.size() -1"
                     */
                    int index = list.size() - 1;
                    if (index > -1) {
                        this.setForm(list.get(row = row > index ? index : row));
                    } else {
                        this.ClearForm();
                    }
                    System.out.println(this.file.getPath());
                    this.clearBgrTxtForm();
                    this.fillTable();
                } else {
                    MsgBox.alert(this, "Không thể xóa chuyên đề đang tồn tại khóa học",
                            "Xóa chuyên đề", MsgBox.BaoLoi);
                    this.txtMaCD.setBackground(Color.YELLOW);
                }

            }
        } else {
            MsgBox.alert(this, "Mã chuyên đề \"không\" tồn tại!",
                    "Xóa chuyên đề", MsgBox.CanhBao);
            this.txtMaCD.setBackground(Color.red);
        }
        this.UpdateStatus();
    }

    // Xóa thông tin trên form
    private void ClearForm() {
        txtHocPhi.setText(null);
        txtMaCD.setText(null);
        txtMoTa.setText(null);
        txtTenCD.setText(null);
        txtThoiLuong.setText(null);
        // Tẩy file, tẩy icon, tẩy nền txt
        this.file = null;
        lblAnh.setIcon(null);
        this.clearBgrTxtForm();
    }

    // Hiển thị thông tin chuyên đề lên form
    private void setForm(ChuyenDe cd) {
        txtHocPhi.setText(cd.getHocPhi() + "");
        txtMaCD.setText(cd.getMaCD());
        txtMoTa.setText(cd.getMoTa());
        txtTenCD.setText(cd.getTenCD());
        txtThoiLuong.setText(cd.getThoiLuong() + "");
        // Thêm file và hình ảnh
        this.file = new File("logos/" + cd.getHinh());
        lblAnh.setIcon(XImage.getIcon(file.getAbsolutePath()));
    }

    // Lấy thông tin form chuyên đề
    private ChuyenDe getForm() {
        String maCD = txtMaCD.getText();
        ChuyenDe cd = new ChuyenDe(maCD);
        int thoiLuong = Validate.ConvertInt(txtThoiLuong.getText());
        double hocPhi = Validate.ConvertDouble(txtHocPhi.getText());
        file = lblAnh.getIcon() == null ? null : file;

        this.clearBgrTxtForm();
        // Kiểm tra tính hợp lệ mã
        if (!Validate.ValString(this, Validate.KI_TU_DAC_BIET, maCD, 5, 5,
                "Mã là các kí tự thường.",
                "Mã có độ dài phải bằng 5",
                "Không chứa kí tự đặc biệt",
                "Không chứ khoảng trắng")) {
            this.txtMaCD.setBackground(Color.yellow);
            return null;
        }
        // Kiểm tra tính hợp lệ tên
        if (txtTenCD.getText().length() < 3 || 50 < txtTenCD.getText().length()) {
            MsgBox.alert(this, "Tên chuyên đề trong khoảng 3 - 50!",
                    "Ghi chú chuyên đề", MsgBox.CanhBao);
            this.txtTenCD.setBackground(Color.yellow);
            return null;
        }
        // Kiểm tra thời lượng
        if (thoiLuong < 0) {
            MsgBox.alert(this, "Cần nhập giá trị số nguyên cho thời lượng học!",
                    "Thời lượng chuyên đề", MsgBox.CanhBao);
            this.txtThoiLuong.setBackground(Color.yellow);
            this.txtThoiLuong.setText(null);
            return null;
        }
        // Kiểm tra học phí là số
        if (hocPhi < 0D) {
            MsgBox.alert(this, "Cần nhập giá trị số thực cho học phí!",
                    "Học phí chuyên đề", MsgBox.CanhBao);
            this.txtHocPhi.setBackground(Color.yellow);
            this.txtHocPhi.setText(null);
            return null;
        }
        // Kiểm độ dài mô tả chuyên đề
        if (txtMoTa.getText().length() > 255) {
            MsgBox.alert(this, "Ghi chú nằm trong khoảng 0 - 255 kí tự!",
                    "Ghi chú chuyên đề", MsgBox.CanhBao);
            this.txtMoTa.setBackground(Color.yellow);
            return null;
        }
        // Bắt người dùng phải chọn hình ảnh
        while (file == null) {
            int select = MsgBox.confirm(this, "Xác nhận mặc định ảnh?",
                    "Chọn ảnh", MsgBox.CanhBao);
            if (select == 0) {
                file = new File("logos/none.png");
                String path = file == null ? null : file.getAbsolutePath();
                this.lblAnh.setIcon(XImage.getIcon(path));
            } else {
                this.chooserIMG();
            }
        }
        // Thêm các thông tin vào đối tượng chuyên đề
        cd.setTenCD(txtTenCD.getText());
        cd.setHinh(file.getName());
        cd.setMoTa(txtMoTa.getText());
        cd.setHocPhi(hocPhi);
        cd.setThoiLuong(thoiLuong);
        return cd;
    }

    // Thể hiện thông tin dữ liệu của danh sách
    private void fillTable() {
        model = (DefaultTableModel) this.tblDSCD.getModel();
        model.setRowCount(0);
        if (!list.isEmpty()) {
            // Kiểm tra danh sách tồn tại và duyệt mảng
            list.forEach((x) -> {
                Object[] rowData = {x.getMaCD(), x.getTenCD(),
                    x.getHocPhi(), x.getThoiLuong(), x.getHinh()};
                model.addRow(rowData);
            });
        }
    }

    // Hiển thị thông tin theo vị trí danh sách
    private void Directional(int row) {
        if (row >= 0) {
            this.setForm(list.get(row));
            this.tblDSCD.setRowSelectionInterval(row, row);
            this.UpdateStatus();
        }
        // Chỉnh điều hướng "next" & "previous" trên form
        if (row == 0) {
            this.bntPrev.setEnabled(false);
        } else if (row == list.size() - 1) {
            this.bntNext.setEnabled(false);
        } else {
            this.bntPrev.setEnabled(true);
            this.bntNext.setEnabled(true);
        }
        this.clearBgrTxtForm();
    }

    // Chỉnh sửa thao tác trên form
    private void UpdateStatus() {
        int size = list.size(); // Kiểm tra điều kiện danh sách + vị trí
        boolean check = row > -1 && row < size;
        // Các nút trên form 
        this.txtMaCD.setEditable(!check);
        this.bntThem.setEnabled(!check);
        this.bntSua.setEnabled(check);
        this.bntXoa.setEnabled(check);
        // Các nút điều hướng
        this.bntFirst.setEnabled(check);
        this.bntPrev.setEnabled(check && row > 0);
        this.bntNext.setEnabled(check && row < --size);
        this.bntEnd.setEnabled(check);
    }

    // Xóa màu nền trên txt
    private void clearBgrTxtForm() {
        this.txtMaCD.setBackground(null);
        this.txtTenCD.setBackground(null);
        this.txtThoiLuong.setBackground(null);
        this.txtHocPhi.setBackground(null);
    }

    //  Xem thông tin tạo vị trí bảng đã chọn
    private void clickTable() {
        this.row = this.tblDSCD.getSelectedRow();
        this.row = this.findList(tblDSCD.getValueAt(row, 0).toString());
        this.setForm(list.get(row));
        this.tabsChuyenDe.setSelectedIndex(0);
        this.clearBgrTxtForm();
        this.UpdateStatus();
    }

    // Chọn và thay thế ảnh
    private void chooserIMG() {
        file = XImage.ChooserFile(this);
        String path = file == null ? null : file.getAbsolutePath();
        this.lblAnh.setIcon(XImage.getIcon(path));
    }

    // Tìm phần tử trùng lặp đầu tiên trong danh sách
    private int findList(String code) {
        if (!list.isEmpty()) {
            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).getMaCD().equalsIgnoreCase(code)) {
                    return row = i;
                }
            }
        }
        return -1;
    }
}
