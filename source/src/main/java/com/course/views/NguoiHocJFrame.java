package com.course.views;

import java.awt.Color;
import java.awt.Component;
import java.sql.Date;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

import com.course.dao.NguoiHocDAO;
import com.course.dao.NhanVienDAO;
import com.course.entites.NguoiHoc;
import com.course.model.Author;
import com.course.model.MsgBox;
import com.course.model.SendMail;
import com.course.model.Sqlbase;
import com.course.model.Util;
import com.course.model.Validate;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author abc
 */
@SuppressWarnings("serial")
public final class NguoiHocJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NguoiHocJFrame
     *
     * @param component
     */
    public NguoiHocJFrame(Component component) {
        if (Author.isLogin()) {
            initComponents();
            this.initData(component);
        } else {
            int answer = MsgBox.confirm(component, "Bạn chưa đăng nhập tài khoản!\n"
                    + "Bạn có muốn tới trang đăng nhập?",
                    "Chưa đăng nhập tài khoản.", MsgBox.BaoLoi);
            if (answer == 0) {
                this.dispose();
                new DangNhapJDialog(this, true).setVisible(true);
            } else {
                System.exit(0);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        giotinh = new javax.swing.ButtonGroup();
        lblQuanLyNH = new javax.swing.JLabel();
        tabsQuanLyNH = new javax.swing.JTabbedPane();
        pnlCapNhatNH = new javax.swing.JPanel();
        lblMaNH = new javax.swing.JLabel();
        lblTenNH = new javax.swing.JLabel();
        lblGioiTinhNH = new javax.swing.JLabel();
        lblNgaySinhNH = new javax.swing.JLabel();
        lblDienThoaiNH = new javax.swing.JLabel();
        lblDiaChiEmail = new javax.swing.JLabel();
        rdoMale = new javax.swing.JRadioButton();
        rdoFeMale = new javax.swing.JRadioButton();
        txtMaNH = new javax.swing.JTextField();
        txtTenNH = new javax.swing.JTextField();
        txtNgaySinh = new javax.swing.JTextField();
        txtDienThoai = new javax.swing.JTextField();
        txtDiaChiEmail = new javax.swing.JTextField();
        spnGhiChuNH = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        bntThem = new javax.swing.JButton();
        bntSua = new javax.swing.JButton();
        bntXoa = new javax.swing.JButton();
        bntMoi = new javax.swing.JButton();
        bntFirst = new javax.swing.JButton();
        bntPrev = new javax.swing.JButton();
        bntNext = new javax.swing.JButton();
        bntEnd = new javax.swing.JButton();
        pnlDanhSachNH = new javax.swing.JPanel();
        pnlTimKiem = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        btnExportHocVien = new javax.swing.JButton();
        spnDanhSachNH = new javax.swing.JScrollPane();
        tblNguoiHoc = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EduSys - Quản lý người học");

        lblQuanLyNH.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        lblQuanLyNH.setForeground(java.awt.Color.blue);
        lblQuanLyNH.setText("QUẢN LÝ NGƯỜI HỌC");

        tabsQuanLyNH.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        lblMaNH.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblMaNH.setText("Mã người học");

        lblTenNH.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblTenNH.setText("Họ và Tên");

        lblGioiTinhNH.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblGioiTinhNH.setText("Giới tính");

        lblNgaySinhNH.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblNgaySinhNH.setText("Ngày sinh (năm / tháng / ngày)");

        lblDienThoaiNH.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblDienThoaiNH.setText("Điện thoại");

        lblDiaChiEmail.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        lblDiaChiEmail.setText("Địa chỉ email");

        giotinh.add(rdoMale);
        rdoMale.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        rdoMale.setText("Nam");

        giotinh.add(rdoFeMale);
        rdoFeMale.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        rdoFeMale.setSelected(true);
        rdoFeMale.setText("Nữ");

        txtMaNH.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtTenNH.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtNgaySinh.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtNgaySinh.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNgaySinhKeyReleased(evt);
            }
        });

        txtDienThoai.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtDiaChiEmail.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        txtGhiChu.setColumns(20);
        txtGhiChu.setRows(5);
        txtGhiChu.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ghi chú", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 0, 12))); // NOI18N
        spnGhiChuNH.setViewportView(txtGhiChu);

        bntThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Add.png"))); // NOI18N
        bntThem.setText("Thêm");
        bntThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntThemActionPerformed(evt);
            }
        });

        bntSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Update.png"))); // NOI18N
        bntSua.setText("Sửa");
        bntSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSuaActionPerformed(evt);
            }
        });

        bntXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Delete.png"))); // NOI18N
        bntXoa.setText("Xóa");
        bntXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntXoaActionPerformed(evt);
            }
        });

        bntMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/info.png"))); // NOI18N
        bntMoi.setText("Mới");
        bntMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntMoiActionPerformed(evt);
            }
        });

        bntFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/First.png"))); // NOI18N
        bntFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntFirstActionPerformed(evt);
            }
        });

        bntPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Prev.png"))); // NOI18N
        bntPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPrevActionPerformed(evt);
            }
        });

        bntNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Next.png"))); // NOI18N
        bntNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntNextActionPerformed(evt);
            }
        });

        bntEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/End.png"))); // NOI18N
        bntEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEndActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCapNhatNHLayout = new javax.swing.GroupLayout(pnlCapNhatNH);
        pnlCapNhatNH.setLayout(pnlCapNhatNHLayout);
        pnlCapNhatNHLayout.setHorizontalGroup(
            pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnGhiChuNH)
                    .addComponent(lblMaNH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMaNH)
                    .addComponent(lblTenNH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTenNH)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCapNhatNHLayout.createSequentialGroup()
                        .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGioiTinhNH, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                                .addComponent(rdoFeMale)
                                .addGap(18, 18, 18)
                                .addComponent(rdoMale)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblNgaySinhNH, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(txtNgaySinh, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)))
                    .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                        .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDienThoaiNH, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDiaChiEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDiaChiEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                        .addComponent(bntThem, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntSua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntMoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(bntFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntPrev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntEnd)))
                .addContainerGap())
        );

        pnlCapNhatNHLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rdoFeMale, rdoMale});

        pnlCapNhatNHLayout.setVerticalGroup(
            pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMaNH, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaNH, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTenNH, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTenNH, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGioiTinhNH)
                    .addComponent(lblNgaySinhNH))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rdoMale)
                        .addComponent(rdoFeMale)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                        .addComponent(lblDienThoaiNH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCapNhatNHLayout.createSequentialGroup()
                        .addComponent(lblDiaChiEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDiaChiEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(spnGhiChuNH, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(pnlCapNhatNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bntThem)
                    .addComponent(bntFirst)
                    .addComponent(bntPrev)
                    .addComponent(bntNext)
                    .addComponent(bntEnd)
                    .addComponent(bntSua)
                    .addComponent(bntXoa)
                    .addComponent(bntMoi))
                .addContainerGap())
        );

        pnlCapNhatNHLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bntEnd, bntFirst, bntMoi, bntNext, bntPrev, bntSua, bntThem, bntXoa});

        tabsQuanLyNH.addTab("CẬP NHẬT", pnlCapNhatNH);

        pnlTimKiem.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 1, 12))); // NOI18N

        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });

        btnExportHocVien.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        btnExportHocVien.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/excel.png"))); // NOI18N
        btnExportHocVien.setText("Export");
        btnExportHocVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportHocVienActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTimKiemLayout = new javax.swing.GroupLayout(pnlTimKiem);
        pnlTimKiem.setLayout(pnlTimKiemLayout);
        pnlTimKiemLayout.setHorizontalGroup(
            pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTimKiemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTimKiem)
                .addGap(18, 18, 18)
                .addComponent(btnExportHocVien)
                .addContainerGap())
        );
        pnlTimKiemLayout.setVerticalGroup(
            pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTimKiemLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportHocVien)))
        );

        tblNguoiHoc.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        tblNguoiHoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ NH", "HỌ VÀ TÊN", "GIỚI TÍNH", "NGÀY SINH", "ĐIỆN THOẠI", "EMAIL", "MÃ NV", "NGÀY ĐK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNguoiHoc.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblNguoiHoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNguoiHocMouseClicked(evt);
            }
        });
        spnDanhSachNH.setViewportView(tblNguoiHoc);
        if (tblNguoiHoc.getColumnModel().getColumnCount() > 0) {
            tblNguoiHoc.getColumnModel().getColumn(1).setMinWidth(120);
        }

        javax.swing.GroupLayout pnlDanhSachNHLayout = new javax.swing.GroupLayout(pnlDanhSachNH);
        pnlDanhSachNH.setLayout(pnlDanhSachNHLayout);
        pnlDanhSachNHLayout.setHorizontalGroup(
            pnlDanhSachNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachNHLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDanhSachNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnDanhSachNH, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
                    .addComponent(pnlTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlDanhSachNHLayout.setVerticalGroup(
            pnlDanhSachNHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDanhSachNHLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spnDanhSachNH, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsQuanLyNH.addTab("DANH SÁCH", pnlDanhSachNH);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuanLyNH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabsQuanLyNH)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblQuanLyNH, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabsQuanLyNH))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntThemActionPerformed
        if (Author.isLogin())
            this.Insert();
    }//GEN-LAST:event_bntThemActionPerformed

    private void bntSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSuaActionPerformed
        if (Author.isLogin())
            this.Update();
    }//GEN-LAST:event_bntSuaActionPerformed

    private void bntXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntXoaActionPerformed
        if (Author.isLogin())
            if (Author.isManager())
                this.Delete();
            else
                MsgBox.alert(this, "Nhân viên không được xóa thông tin",
                        "Bạn là nhân viên thực hiện thao tác", MsgBox.KhongCo);
    }//GEN-LAST:event_bntXoaActionPerformed

    private void bntMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntMoiActionPerformed
        if (Author.isLogin()) {
            this.row = -1;
            this.ClearForm();
            this.UpdateStatus();
        }
    }//GEN-LAST:event_bntMoiActionPerformed

    private void bntFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntFirstActionPerformed
        if (Author.isLogin())
            this.Directional(row = 0);
    }//GEN-LAST:event_bntFirstActionPerformed

    private void bntPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPrevActionPerformed
        if (Author.isLogin())
            this.Directional(row > 0 ? --row : 0);
    }//GEN-LAST:event_bntPrevActionPerformed

    private void bntNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNextActionPerformed
        if (Author.isLogin()) {
            row = list.isEmpty() ? -1 : ++row;
            this.Directional(row);
        }
    }//GEN-LAST:event_bntNextActionPerformed

    private void bntEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEndActionPerformed
        if (Author.isLogin()) {
            row = list.isEmpty() ? -1 : list.size() - 1;
            this.Directional(row);
        }
    }//GEN-LAST:event_bntEndActionPerformed

    private void tblNguoiHocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNguoiHocMouseClicked
        if (Author.isLogin())
            if (evt.getClickCount() > 1)
                this.clickTable();
    }//GEN-LAST:event_tblNguoiHocMouseClicked

    private void txtNgaySinhKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNgaySinhKeyReleased
        String text = txtNgaySinh.getText();
        int l = text.length();
        if (l == 4 || l == 7) {
            text += "/";
        }
        if (l > 10) {
            text = text.substring(0, 9);
        }
        txtNgaySinh.setText(text);
    }//GEN-LAST:event_txtNgaySinhKeyReleased

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        if (Author.isLogin()) {
            String findBy = txtTimKiem.getText();
            String sql = Sqlbase.sqlNH.SQL_SELECT
                    + " where MaNH like N'%" + findBy
                    + "%' or HoTen like N'%" + findBy
                    + "%' or NgaySinh like N'%" + findBy
                    + "%' or DienThoai like N'%" + findBy
                    + "%' or Email like N'%" + findBy +"%'";
            list = dao.SelectBySql(sql);
            fillTable();
        }
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void btnExportHocVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportHocVienActionPerformed
        try {
            Util.saveToExcel(tblNguoiHoc);
        } catch (Exception e) {
            MsgBox.alert(btnExportHocVien, "Export failed by: " + e.getMessage(), "Export to excel", MsgBox.BaoLoi);
        }
    }//GEN-LAST:event_btnExportHocVienActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NguoiHocJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new NguoiHocJFrame(null).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntEnd;
    private javax.swing.JButton bntFirst;
    private javax.swing.JButton bntMoi;
    private javax.swing.JButton bntNext;
    private javax.swing.JButton bntPrev;
    private javax.swing.JButton bntSua;
    private javax.swing.JButton bntThem;
    private javax.swing.JButton bntXoa;
    private javax.swing.JButton btnExportHocVien;
    private javax.swing.ButtonGroup giotinh;
    private javax.swing.JLabel lblDiaChiEmail;
    private javax.swing.JLabel lblDienThoaiNH;
    private javax.swing.JLabel lblGioiTinhNH;
    private javax.swing.JLabel lblMaNH;
    private javax.swing.JLabel lblNgaySinhNH;
    private javax.swing.JLabel lblQuanLyNH;
    private javax.swing.JLabel lblTenNH;
    private javax.swing.JPanel pnlCapNhatNH;
    private javax.swing.JPanel pnlDanhSachNH;
    private javax.swing.JPanel pnlTimKiem;
    private javax.swing.JRadioButton rdoFeMale;
    private javax.swing.JRadioButton rdoMale;
    private javax.swing.JScrollPane spnDanhSachNH;
    private javax.swing.JScrollPane spnGhiChuNH;
    private javax.swing.JTabbedPane tabsQuanLyNH;
    private javax.swing.JTable tblNguoiHoc;
    private javax.swing.JTextField txtDiaChiEmail;
    private javax.swing.JTextField txtDienThoai;
    private javax.swing.JTextArea txtGhiChu;
    private javax.swing.JTextField txtMaNH;
    private javax.swing.JTextField txtNgaySinh;
    private javax.swing.JTextField txtTenNH;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    // Biến toàn cục thao tác dữ liệu
    private final NguoiHocDAO dao = new NguoiHocDAO(); // Thao tác database
    private List<NguoiHoc> list = new LinkedList<>();
    private DefaultTableModel model = null; // Model xét dữ liệu bảng
    private int row = -1; // Vị trí thông tin danh sách

    // Tải dữ liệu lần đầu từ database
    private void initData(Component c) {
        list = dao.SelectAll();
        this.fillTable();
        this.tblNguoiHoc.setAutoCreateRowSorter(true);
        this.setIconImage(((JFrame) c).getIconImage());
        this.setLocationRelativeTo(c);
        this.UpdateStatus();
    }

    // Thêm dữ liệu vào database
    private void Insert() {
        if (findList(txtMaNH.getText()) == -1) {
            // Kiểm tra không tồn tại
            NguoiHoc nguoiHoc = this.getForm();
            if (nguoiHoc != null) {
                // Lấy thông tin người học và thêm dữ liệu
                if (dao.Insert(nguoiHoc)) {
                    list.add(nguoiHoc);
                    if (MsgBox.confirm(this, "Đã \"thêm\" mới người học.\n"
                            + "Gửi thông báo tới người học này?",
                            "Thêm người học", 0) == 0) {
                        String x = this.autoMes(nguoiHoc);
                        senđingEmail(nguoiHoc.getEmail(), "Lập Trình City Thông Báo", x);
                    }

                    this.ClearForm(); // Xóa form
                    this.fillTable(); // Xem thông tin
                    this.UpdateStatus(); // Cập nhật điều hướng
                    this.clearBgrTxtForm(); // Xóa txt background
                } else {
                    MsgBox.alert(this, "Không thể thêm người học đang tại!",
                            "Thêm người học", MsgBox.CanhBao);
                }
            }
        } else {
            MsgBox.alert(this, "Mã người học \"" + txtMaNH.getText()
                    + "\" \"đã\" tồn tại!", "Thêm người học", MsgBox.CanhBao);
            this.txtMaNH.setBackground(Color.red);
        }
    }

    // Cập nhật thông tin người học
    private void Update() {
        int index = findList(txtMaNH.getText());
        if (index > -1) {
            // Kiểm tra danh sách tồn tại => cập nhật
            NguoiHoc nguoiHoc = this.getForm();
            if (nguoiHoc != null) {
                if (dao.Update(nguoiHoc)) {
                    // Cập nhật thông tin người học trên "database"
                    list.set(index, nguoiHoc);
                    MsgBox.alert(this, "Đã \"sửa\" người học: "
                            + txtMaNH.getText(), "Sửa người học", MsgBox.ThongTin);

                    this.ClearForm(); // Xóa form sau thông báo
                    this.fillTable(); // Làm mới dữ liệu
                    this.UpdateStatus(); // Cập nhật các nút điều hướng
                    this.clearBgrTxtForm(); // Xóa background txt form
                } else {
                    System.out.println("Khong duoc cap nhat nguoi hoc nay!");
                }
            }
        } else {
            MsgBox.alert(this, "Mã người học không tồn tại!",
                    "Sửa người học", MsgBox.CanhBao);
            this.txtMaNH.setBackground(Color.red);
        }
    }

    // Xóa thông tin người học
    private void Delete() {
        row = this.findList(this.txtMaNH.getText());
        if (row > -1) {
            boolean OK = 0 == MsgBox.confirm(this, "Xác nhận xóa người học: "
                    + this.txtMaNH.getText() + "?", "Xóa người dùng", MsgBox.CanhBao);
            if (OK) {
                // Kiểm tra tồn tại và xóa trên dữ liệu trên "database"
                if (dao.Delete(txtMaNH.getText())) {
                    list.remove(row); // Xóa trong danh sách sau thao tác "database"
                    MsgBox.alert(this, "Đã \"xóa\" người học: "
                            + txtMaNH.getText(), "Xóa người học", MsgBox.ThongTin);
                    /**
                     * Xem lại các thông tin tiếp theo
                     * ........................... Nếu danh ở vị trí cuối: "row
                     * = list.size() -1"
                     */
                    int index = list.size() - 1;
                    if (index > -1) {
                        this.setForm(list.get(row = row > index ? index : row));
                    } else {
                        this.ClearForm();
                    }
                    this.clearBgrTxtForm();
                    this.fillTable();
                } else {
                    MsgBox.alert(this, "Không thể xóa người học đang học",
                            "Xóa người học", MsgBox.BaoLoi);
                    this.txtMaNH.setBackground(Color.YELLOW);
                }
            }
        } else {
            MsgBox.alert(this, "Mã người học \"không\" tồn tại!",
                    "Xóa người học", MsgBox.CanhBao);
            this.txtMaNH.setBackground(Color.red);
        }
        this.UpdateStatus();
    }

    // Xóa thông tin trên form
    private void ClearForm() {
        this.txtDiaChiEmail.setText(null);
        this.txtDienThoai.setText(null);
        this.txtGhiChu.setText(null);
        this.txtMaNH.setText(null);
        this.txtNgaySinh.setText(null);
        this.txtTenNH.setText(null);
        this.txtTimKiem.setText(null);
        this.clearBgrTxtForm();
    }

    // Xóa màu nền trên txt
    private void clearBgrTxtForm() {
        this.txtMaNH.setBackground(null);
        this.txtTenNH.setBackground(null);
        this.txtNgaySinh.setBackground(null);
        this.txtDienThoai.setBackground(null);
        this.txtDiaChiEmail.setBackground(null);
        this.txtGhiChu.setBackground(null);
    }

    // Hiển thị thông tin người học lên form
    private void setForm(NguoiHoc nh) {
        this.txtDiaChiEmail.setText(nh.getEmail());
        this.txtDienThoai.setText(nh.getDienThoai());
        this.txtGhiChu.setText(nh.getGhiChu());
        this.txtMaNH.setText(nh.getMaNH());
        this.txtNgaySinh.setText(nh.getNgaySinh() + "");
        this.txtTenNH.setText(nh.getHoTen());
        this.rdoMale.setSelected(nh.isGioiTinh());
        this.rdoFeMale.setSelected(!nh.isGioiTinh());
    }

    // Kiểm tra tính hợp lệ dữ liệu
    private NguoiHoc getForm() {
        this.clearBgrTxtForm();
        // Lấy thông tin dữ liệu
        NguoiHoc nh = new NguoiHoc(txtMaNH.getText());
        String dienthoai = txtDienThoai.getText();
        String email = txtDiaChiEmail.getText();
        String ghiChu = txtGhiChu.getText();
        String hoTen = txtTenNH.getText();
        String maNV = Author.user.getMaNV();
        Date ngaySinh; // Giữ liệu được lấy sau dòng "if" thứ 3
        Date ngayDK = new Date(new java.util.Date().getTime());

        // Validate các thông tin dữ liệu
        if (!Validate.ValString(this, Validate.KI_TU_DAC_BIET, nh.getMaNH(), 7, 7,
                "Mã người học không được chứa khoảng trắng!",
                "Không được chứa kí tự đặc biệt!")) {
            this.txtMaNH.setBackground(Color.YELLOW);
            return null;
        } else if (!Validate.ValString(this, Validate.HO_VA_TEN, hoTen, 3, 50,
                "Tên không được chứa kí tự đặc biệt!",
                "Tên không được chứa các kí tự số!")) {
            this.txtTenNH.setBackground(Color.YELLOW);
            return null;
        }
        ngaySinh = Validate.ConvertDate(txtNgaySinh.getText(), this, -631152000000L);
        this.txtNgaySinh.setText(ngaySinh + "");
        if (!Validate.ValString(this, Validate.DIEN_THOAI, dienthoai, 7, 24,
                "Số điện thoại không được chứa kí tự!")) {
            this.txtDienThoai.setBackground(Color.YELLOW);
            return null;
        } else if (!Validate.ValString(this, Validate.EMAIL, email, 12, 50,
                "Email không đúng định dạng!")) {
            this.txtDiaChiEmail.setBackground(Color.YELLOW);
            return null;
        } else if (ghiChu.length() > 255) {
            MsgBox.alert(this, "Ghi chú phải trong khoảng 255 kí tự!",
                    "Cảnh báo dữ liệu!", MsgBox.CanhBao);
            this.txtGhiChu.setBackground(Color.YELLOW);
            return null;
        }

        // Thêm các thông tin vào đối tượng người học
        nh.setDienThoai(dienthoai);
        nh.setEmail(email);
        nh.setGhiChu(ghiChu);
        nh.setGioiTinh(rdoMale.isSelected());
        nh.setHoTen(hoTen);
        nh.setMaNV(maNV);
        nh.setNgayDK(ngayDK);
        nh.setNgaySinh(ngaySinh);
        return nh;
    }

    // Thể hiện thông tin dữ liệu của danh sách
    private void fillTable() {
        model = (DefaultTableModel) this.tblNguoiHoc.getModel();
        model.setRowCount(0);
        if (!list.isEmpty()) {
            // Kiểm tra danh sách tồn tại và duyệt mảng
            list.forEach((x) -> {
                Object[] rowData = {x.getMaNH(), x.getHoTen(), x.isGioiTinh() ? "Nam" :"Nữ",
                    x.getNgaySinh(), x.getDienThoai(), x.getEmail(), x.getMaNV(), x.getNgayDK()};
                model.addRow(rowData);
            });
        }
    }

    // Hiển thị thông tin theo vị trí danh sách
    private void Directional(int row) {
        if (row >= 0) {
            this.setForm(list.get(row));
            this.tblNguoiHoc.setRowSelectionInterval(row, row);
            this.UpdateStatus();
        }
        // Chỉnh điều hướng "next" & "previous" trên form
        if (row == 0) {
            this.bntPrev.setEnabled(false);
        } else if (row == list.size() - 1) {
            this.bntNext.setEnabled(false);
        } else {
            this.bntPrev.setEnabled(true);
            this.bntNext.setEnabled(true);
        }
        this.clearBgrTxtForm();
    }

    // Chỉnh sửa thao tác trên form
    private void UpdateStatus() {
        int size = list.size(); // Kiểm tra điều kiện danh sách + vị trí
        boolean check = row > -1 && row < size;
        // Các nút trên form 
        this.txtMaNH.setEditable(!check);
        this.bntThem.setEnabled(!check);
        this.bntSua.setEnabled(check);
        this.bntXoa.setEnabled(check);
        // Các nút điều hướng
        this.bntFirst.setEnabled(check);
        this.bntPrev.setEnabled(check && row > 0);
        this.bntNext.setEnabled(check && row < --size);
        this.bntEnd.setEnabled(check);
    }

    //  Xem thông tin tạo vị trí bảng đã chọn
    private void clickTable() {
        this.row = this.tblNguoiHoc.getSelectedRow();
        this.row = this.findList(tblNguoiHoc.getValueAt(row, 0).toString());
        this.setForm(list.get(row));
        this.tabsQuanLyNH.setSelectedIndex(0);
        this.clearBgrTxtForm();
        this.UpdateStatus();
    }

    // Tìm phần tử trùng lặp đầu tiên trong danh sách
    private int findList(String code) {
        if (!list.isEmpty()) {
            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).getMaNH().equalsIgnoreCase(code)) {
                    return row = i;
                }
            }
        }
        return -1;
    }

    private void senđingEmail(String toMail, String tieuDe, String mes) {
        SendMail x = new SendMail("hoandps18107@gmail.com", "Dhps18107");
        x.setUp(toMail, tieuDe, mes);
        if (x.sendingEmail()) {
            MsgBox.alert(this, "Đã gửi mail: " + toMail, "Gửi email", MsgBox.ThongTin);
        } else {
            MsgBox.alert(this, "Lỗi email: ", "Gửi email" + toMail, MsgBox.CanhBao);
        }
    }

    private String autoMes(NguoiHoc x) {
        String mes = "Hôm nay: " + new java.util.Date();
        StringBuilder s = new StringBuilder(mes);
        s.append("\nLập trình city xin thông báo tới ");
        s.append(x.getHoTen());
        s.append(" đã là học viên của lập trình city với thông tin là:");
        s.append("\n- Mã báo danh: ").append(x.getMaNH());
        s.append("\n- Họ tên: ").append(x.getHoTen());
        s.append("\n- Giới tính: ").append(x.isGioiTinh() ? "nam" : "nữ");
        s.append("\n- Ngày sinh: ").append(x.getNgaySinh());
        s.append("\n- Điện thoại: ").append(x.getDienThoai());
        s.append("\n- Email: ").append(x.getEmail());
        s.append("\n- Ghi chú: ").append(x.getGhiChu());
        s.append("\n- Thêm bởi nhân viên: \"").append(
                new NhanVienDAO().SelectById(x.getMaNV()).getHoTen());
        s.append("\"\n____________________________________________________________").append(
                "\nCảm ơn đã xem, chúc bạn có kì học vui vẻ!");
        return s.toString();
    }
}
