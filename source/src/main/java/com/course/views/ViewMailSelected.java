/*

 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.course.views;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

import com.course.dao.NguoiHocDAO;
import com.course.entites.NguoiHoc;
import com.course.model.MsgBox;
import com.course.model.SendMail;

/**
 *
 * @author abc
 */
public final class ViewMailSelected extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ViewMaiiSelected
     *
     * @param parent
     * @param modal
     * @param list
     */
    java.awt.Frame parent;

    public ViewMailSelected(java.awt.Frame parent, boolean modal, List<Object[]> list) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        this.initDatas(parent, list);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSendMail = new javax.swing.JLabel();
        lblSending = new javax.swing.JLabel();
        spnSendMail = new javax.swing.JScrollPane();
        tblSendMail = new javax.swing.JTable();
        spnSending = new javax.swing.JScrollPane();
        tblSending = new javax.swing.JTable();
        chkSendAll = new javax.swing.JCheckBox();
        bntXoa = new javax.swing.JButton();
        bntGui = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EduSys - Gửi thông tin điểm");

        lblSendMail.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        lblSendMail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSendMail.setText("Danh sách người học cần gửi email");

        lblSending.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        lblSending.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSending.setText("Danh sách gửi");

        tblSendMail.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        tblSendMail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã NH", "Mã HV", "Email", "Điểm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSendMail.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblSendMail.setDragEnabled(true);
        tblSendMail.setEditingColumn(0);
        tblSendMail.setRowHeight(20);
        tblSendMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSendMailMouseClicked(evt);
            }
        });
        spnSendMail.setViewportView(tblSendMail);
        if (tblSendMail.getColumnModel().getColumnCount() > 0) {
            tblSendMail.getColumnModel().getColumn(0).setMaxWidth(80);
            tblSendMail.getColumnModel().getColumn(1).setMaxWidth(60);
            tblSendMail.getColumnModel().getColumn(3).setMaxWidth(60);
        }

        tblSending.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        tblSending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Email", "Điểm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSending.setRowHeight(20);
        tblSending.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSendingMouseClicked(evt);
            }
        });
        spnSending.setViewportView(tblSending);
        if (tblSending.getColumnModel().getColumnCount() > 0) {
            tblSending.getColumnModel().getColumn(1).setMaxWidth(80);
        }

        chkSendAll.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        chkSendAll.setText("ALL");
        chkSendAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSendAllActionPerformed(evt);
            }
        });

        bntXoa.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        bntXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Delete.png"))); // NOI18N
        bntXoa.setText("Xóa");
        bntXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntXoaActionPerformed(evt);
            }
        });

        bntGui.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        bntGui.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/send.png"))); // NOI18N
        bntGui.setText("Gửi");
        bntGui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntGuiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblSendMail, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                    .addComponent(spnSendMail, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(spnSending, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(lblSending, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkSendAll, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bntXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bntGui)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bntGui, bntXoa});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblSendMail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSending, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spnSendMail, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(spnSending, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bntXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bntGui, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(chkSendAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(15, 15, 15))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bntGui, bntXoa});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkSendAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSendAllActionPerformed
        if (chkSendAll.isSelected())
            this.addAction();
        else {
            list2.forEach((x) -> list1.add(x));
            list2.clear();
            fillTable();
        }
    }//GEN-LAST:event_chkSendAllActionPerformed

    private void bntXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntXoaActionPerformed
        if (tblSending.getSelectedRow() > -1) {
            this.DelAction();
        }
    }//GEN-LAST:event_bntXoaActionPerformed

    private void bntGuiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntGuiActionPerformed
        this.sendMailAction();
    }//GEN-LAST:event_bntGuiActionPerformed

    private void tblSendMailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSendMailMouseClicked
        if (evt.getClickCount() > 1) {
            this.addAction();
        }
    }//GEN-LAST:event_tblSendMailMouseClicked

    private void tblSendingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSendingMouseClicked
        if (evt.getClickCount() > 1) {
            this.DelAction();
        }
    }//GEN-LAST:event_tblSendingMouseClicked

    public static void main(String[] args) {
        // Test dữ liệu
        List<Object[]> list = new ArrayList<>();
        Object[][] arr = {
            {"NH0A063", 226, "HuynhTanSinh113@gmail.com", 9},
            {"NH0A064", 227, "NguyenDieuLinh114@gmail.com", 6},
            {"NH0A068", 228, "PhanNgocAnh118@gmail.com", 8.3},
            {"NH0A069", 229, "PhamVanTruong119@gmail.com", 8},
            {"NH0A070", 230, "MaiThiThao120@gmail.com", 8},
            {"NH0A071", 231, "HoangBaoKhanh121@gmail.com", 7},
            {"NH0A073", 232, "NguyenDucGiang123@gmail.com", 6.6},
            {"NH0A074", 233, "NguyenTienDanh124@gmail.com", 8},
            {"NH0A075", 234, "PhamVanAnh125@gmail.com", 5},
            {"Ps18107", 235, "Ngoduyhoaname2002@gmail.com", 8}};
        list.addAll(Arrays.asList(arr));

        new ViewMailSelected(new JFrame(), true, list).setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntGui;
    private javax.swing.JButton bntXoa;
    private javax.swing.JCheckBox chkSendAll;
    private javax.swing.JLabel lblSendMail;
    private javax.swing.JLabel lblSending;
    private javax.swing.JScrollPane spnSendMail;
    private javax.swing.JScrollPane spnSending;
    private javax.swing.JTable tblSendMail;
    private javax.swing.JTable tblSending;
    // End of variables declaration//GEN-END:variables

    /**
     * list1 danh sách tải dữ liệu list2 danh sách cần gửi email tblModel1 hiển
     * thị "list1" tblModel2 hiển thị "list2"
     */
    private List<Object[]> list1 = new ArrayList<>();
    private final List<Object[]> list2 = new ArrayList<>();
    private DefaultTableModel tblModel1, tblModel2;

    // Tải dữ liệu lần đầu
    private void initDatas(Frame parent, List<Object[]> list) {
        this.setLocationRelativeTo(parent);
        if (!(list1 = list).isEmpty()) {
            this.fillTable();
        }
        tblSendMail.setShowHorizontalLines(false);
        tblSendMail.setAutoCreateRowSorter(true);
    }

    // Thêm vào danh sách muốn gửi
    private void addAction() {
        if (chkSendAll.isSelected()) {
            this.list1.forEach((x) -> list2.add(x));
            list1.clear();
        } else {
            int row1 = tblSendMail.getSelectedRow();
            row1 = findByCode(tblSendMail.getValueAt(row1, 0))[0];
            list2.add(list1.get(row1));
            list1.remove(row1);
        }
        this.chkSendAll.setSelected(list1.isEmpty());
        this.fillTable();
    }
    
    // hàm tìm thông tin theo mã
    private int[] findByCode(Object...codes){
        int[] xs = new int[codes.length];
        for (int i = 0; i < xs.length; i++) {
            xs[i] = -1;
            for (int j = 0; j < list1.size(); j++) {
                if(codes[i].equals(list1.get(j)[i])){
                    xs[i] = j;
                }
            }
        }
        return xs;
    }

    // Xóa khỏi danh sách muốn gửi
    private void DelAction() {
        // Lấy thông tin
        this.chkSendAll.setSelected(false);
        int i = tblSending.getSelectedRow();
        // Thao tác sửa
        list1.add(list2.get(i));
        list2.remove(i);
        this.fillTable();
    }

    // Xem thông tin bảng
    private void fillTable() {
        tblModel1 = (DefaultTableModel) tblSendMail.getModel();
        tblModel2 = (DefaultTableModel) tblSending.getModel();
        // không để giữ liệu nạp chồng
        tblModel1.setRowCount(0);
        tblModel2.setRowCount(0);
        // Xem thông tin email gửi
        if (list1 != null) {
            list1.forEach((x) -> tblModel1.addRow(x));
        }
        if (list2 != null) {
            list2.forEach((x) -> {
                Object[] row = {x[2], x[3]};
                tblModel2.addRow(row);
            });
        }
    }

    // Gửi thông tin email
    private void sendMailAction() {
        new Thread() {
            @Override // Tạo mới 1 luồng đa nhiệm giữa "gửi email" vs "nút gửi"
            public void run() {
                if (!list2.isEmpty()) {
                    // Tạo mới Jdialog tiến trình gửi
                    WaitingSendJdialog dialog = new WaitingSendJdialog(parent, true);
                    java.awt.EventQueue.invokeLater(() -> {
                        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent e) {
                                System.exit(0);
                            }
                        });
                        dialog.setVisible(true);
                    });

                    // Tạo mới hộp thư email cần gửi
                    SendMail s = new SendMail();
                    int avg = Math.round((100 / list2.size())), next = avg;
                    // Duyệt mảng gửi email
                    for (int i = 0; i < list2.size(); next += avg) {
                        String mail = list2.get(i)[2].toString();
                        dialog.setTrangThai("Đang gửi tới: " + mail, next);
                        s.setUp(mail, "Thông báo điểm được cập nhật",
                                this.message(list2.get(i)));
                        if (s.sendingEmail()) {
                            dialog.setTrangThai("Đã gửi tới: " + mail, next);
                            list2.remove(i);
                            fillTable();
                        }
                    }
                    try {
                        dialog.setTrangThai("Gửi email hoàn tất.", 1000);
                        sleep(2000);
                        dialog.dispose();
                    } catch (InterruptedException e) {
                        System.out.println("Loi trang thai ngu");
                    }
                } else {
                    MsgBox.alert(parent, "Chưa chọn học viên để gửi email.",
                            "Gửi thông báo tới email", MsgBox.CanhBao);
                }
            }

            // Tạo nội dung tin nhắn muốn gửi
            @SuppressWarnings("deprecation")
            private String message(Object[] x) {
                Date date = new Date();
                NguoiHoc nh = new NguoiHocDAO().SelectById(x[0].toString());
                StringBuffer s = new StringBuffer("Hôm nay: ").append(date);
                s.append("\nLập trình city gửi thông báo tới bạn!");
                s.append("\n__________________________________________________");
                s.append("\nLúc: ").append(date.getHours());
                s.append("giờ - ").append(date.getMinutes());
                s.append("phút - ").append(date.getSeconds()).append("giây.");
                s.append("\nGửi tới anh(chị): ").append(nh.getHoTen());
                s.append("\nCó mã người học: ").append(nh.getMaNH());
                s.append("\nĐiểm đạt được là: ").append(x[3]);
                s.append("\n__________________________________________________");
                s.append("\nLập Trình City chúc bạn học tốt và đạt được");
                s.append("kết quả cao.\nThân ái.");
                return s.toString();
            }
        }.start();
    }
}
