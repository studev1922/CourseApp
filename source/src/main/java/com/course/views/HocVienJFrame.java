/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.course.views;

import java.awt.Component;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

import com.course.dao.ChuyenDeDAO;
import com.course.dao.HocVienDAO;
import com.course.dao.KhoaHocDAO;
import com.course.dao.NguoiHocDAO;
import com.course.entites.ChuyenDe;
import com.course.entites.HocVien;
import com.course.entites.KhoaHoc;
import com.course.entites.NguoiHoc;
import com.course.model.Author;
import com.course.model.MsgBox;
import com.course.model.Util;

/**
 *
 * @author abc
 */
@SuppressWarnings("serial")
public final class HocVienJFrame extends javax.swing.JFrame {

    /**
     * Creates new form HocVienJFrame
     *
     * @param component
     */
    public HocVienJFrame(Component component) {
        if (Author.isLogin()) {
            initComponents();
            this.initDatas(component);
        } else {
            int answer = MsgBox.confirm(component, "Bạn chưa đăng nhập tài khoản!\n"
                    + "Bạn có muốn tới trang đăng nhập?",
                    "Chưa đăng nhập tài khoản.", MsgBox.BaoLoi);
            if (answer == 0) {
                this.dispose();
                new DangNhapJDialog(this, true).setVisible(true);
            } else {
                System.exit(0);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlChuyenDe = new javax.swing.JPanel();
        cboChuyenDe = new javax.swing.JComboBox<>();
        pnlKhoaHoc = new javax.swing.JPanel();
        cboKhoaHoc = new javax.swing.JComboBox<>();
        tabsHocVien = new javax.swing.JTabbedPane();
        pnlHocVien = new javax.swing.JPanel();
        bntXoa = new javax.swing.JButton();
        bntCapNhat = new javax.swing.JButton();
        spnHocVien = new javax.swing.JScrollPane();
        tblHocVien = new javax.swing.JTable();
        btnExportHocVien = new javax.swing.JButton();
        pnlNguoiHoc = new javax.swing.JPanel();
        pnlSearch = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        btnExportNguoiHoc = new javax.swing.JButton();
        spnNguoiHoc = new javax.swing.JScrollPane();
        tblNguoiHoc = new javax.swing.JTable();
        bntThemNH = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EduSys - Học viên");

        pnlChuyenDe.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CHUYÊN ĐỀ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 1, 12))); // NOI18N

        cboChuyenDe.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cboChuyenDePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        javax.swing.GroupLayout pnlChuyenDeLayout = new javax.swing.GroupLayout(pnlChuyenDe);
        pnlChuyenDe.setLayout(pnlChuyenDeLayout);
        pnlChuyenDeLayout.setHorizontalGroup(
            pnlChuyenDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChuyenDeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboChuyenDe, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlChuyenDeLayout.setVerticalGroup(
            pnlChuyenDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChuyenDeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboChuyenDe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlKhoaHoc.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "KHÓA HỌC", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 1, 12))); // NOI18N

        cboKhoaHoc.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cboKhoaHocPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        javax.swing.GroupLayout pnlKhoaHocLayout = new javax.swing.GroupLayout(pnlKhoaHoc);
        pnlKhoaHoc.setLayout(pnlKhoaHocLayout);
        pnlKhoaHocLayout.setHorizontalGroup(
            pnlKhoaHocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlKhoaHocLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboKhoaHoc, 0, 300, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlKhoaHocLayout.setVerticalGroup(
            pnlKhoaHocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlKhoaHocLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboKhoaHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabsHocVien.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        bntXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Delete.png"))); // NOI18N
        bntXoa.setText("Xóa khỏi khóa học");
        bntXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntXoaActionPerformed(evt);
            }
        });

        bntCapNhat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Update.png"))); // NOI18N
        bntCapNhat.setText("Cập nhật điểm");
        bntCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntCapNhatActionPerformed(evt);
            }
        });

        tblHocVien.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        tblHocVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "MÃ HV", "MÃ NH", "HỌ TÊN", "ĐIỂM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnHocVien.setViewportView(tblHocVien);
        if (tblHocVien.getColumnModel().getColumnCount() > 0) {
            tblHocVien.getColumnModel().getColumn(0).setMaxWidth(50);
            tblHocVien.getColumnModel().getColumn(1).setMaxWidth(80);
            tblHocVien.getColumnModel().getColumn(2).setMaxWidth(80);
            tblHocVien.getColumnModel().getColumn(4).setMaxWidth(80);
        }

        btnExportHocVien.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        btnExportHocVien.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/excel.png"))); // NOI18N
        btnExportHocVien.setText("Export");
        btnExportHocVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportHocVienActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHocVienLayout = new javax.swing.GroupLayout(pnlHocVien);
        pnlHocVien.setLayout(pnlHocVienLayout);
        pnlHocVienLayout.setHorizontalGroup(
            pnlHocVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHocVienLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExportHocVien)
                .addGap(18, 18, 18)
                .addComponent(bntXoa)
                .addGap(18, 18, 18)
                .addComponent(bntCapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(spnHocVien, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
        );

        pnlHocVienLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bntCapNhat, bntXoa});

        pnlHocVienLayout.setVerticalGroup(
            pnlHocVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHocVienLayout.createSequentialGroup()
                .addComponent(spnHocVien, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlHocVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntXoa)
                    .addComponent(bntCapNhat)
                    .addComponent(btnExportHocVien))
                .addContainerGap())
        );

        pnlHocVienLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bntCapNhat, bntXoa});

        tabsHocVien.addTab("HỌC VIÊN", pnlHocVien);

        pnlSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Cambria", 1, 12))); // NOI18N

        txtSearch.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnExportNguoiHoc.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        btnExportNguoiHoc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/excel.png"))); // NOI18N
        btnExportNguoiHoc.setText("Export");
        btnExportNguoiHoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportNguoiHocActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchLayout = new javax.swing.GroupLayout(pnlSearch);
        pnlSearch.setLayout(pnlSearchLayout);
        pnlSearchLayout.setHorizontalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSearch)
                .addGap(18, 18, 18)
                .addComponent(btnExportNguoiHoc)
                .addContainerGap())
        );
        pnlSearchLayout.setVerticalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch)
                    .addComponent(btnExportNguoiHoc))
                .addContainerGap())
        );

        tblNguoiHoc.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        tblNguoiHoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ NH", "HỌ VÀ TÊN", "GIỚI TÍNH", "NGÀY SINH", "ĐIỆN THOẠI", "EMAIL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnNguoiHoc.setViewportView(tblNguoiHoc);
        if (tblNguoiHoc.getColumnModel().getColumnCount() > 0) {
            tblNguoiHoc.getColumnModel().getColumn(0).setMaxWidth(80);
            tblNguoiHoc.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblNguoiHoc.getColumnModel().getColumn(2).setMaxWidth(60);
            tblNguoiHoc.getColumnModel().getColumn(3).setMaxWidth(80);
            tblNguoiHoc.getColumnModel().getColumn(4).setMaxWidth(80);
        }

        bntThemNH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icons/Add.png"))); // NOI18N
        bntThemNH.setText("Thêm vào khóa học");
        bntThemNH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntThemNHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNguoiHocLayout = new javax.swing.GroupLayout(pnlNguoiHoc);
        pnlNguoiHoc.setLayout(pnlNguoiHocLayout);
        pnlNguoiHocLayout.setHorizontalGroup(
            pnlNguoiHocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlNguoiHocLayout.createSequentialGroup()
                .addGroup(pnlNguoiHocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNguoiHocLayout.createSequentialGroup()
                        .addContainerGap(572, Short.MAX_VALUE)
                        .addComponent(bntThemNH))
                    .addComponent(spnNguoiHoc, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlNguoiHocLayout.setVerticalGroup(
            pnlNguoiHocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNguoiHocLayout.createSequentialGroup()
                .addComponent(pnlSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnNguoiHoc, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bntThemNH)
                .addContainerGap())
        );

        tabsHocVien.addTab("NGƯỜI HỌC", pnlNguoiHoc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabsHocVien)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlChuyenDe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlKhoaHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {pnlChuyenDe, pnlKhoaHoc});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlKhoaHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlChuyenDe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabsHocVien)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {pnlChuyenDe, pnlKhoaHoc});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboChuyenDePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cboChuyenDePopupMenuWillBecomeInvisible
        this.ChuyenDeAction();
    }//GEN-LAST:event_cboChuyenDePopupMenuWillBecomeInvisible

    private void cboKhoaHocPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cboKhoaHocPopupMenuWillBecomeInvisible
        this.KhoaHocAction();
    }//GEN-LAST:event_cboKhoaHocPopupMenuWillBecomeInvisible

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        this.SearchAction();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void bntThemNHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntThemNHActionPerformed
        this.addAction();
    }//GEN-LAST:event_bntThemNHActionPerformed

    private void bntCapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntCapNhatActionPerformed
        this.uppAction();
    }//GEN-LAST:event_bntCapNhatActionPerformed

    private void bntXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntXoaActionPerformed
        if (Author.isManager()) {
            this.delAction();
        } else {
            MsgBox.alert(this, "Nhân viên không được phép xóa!",
                    "Xóa học viên khỏi khóa học", MsgBox.CanhBao);
        }
    }//GEN-LAST:event_bntXoaActionPerformed

    private void btnExportNguoiHocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportNguoiHocActionPerformed
        try {
            Util.saveToExcel(tblNguoiHoc);
        } catch (Exception e) {
            MsgBox.alert(btnExportNguoiHoc, "Export failed by: " + e.getMessage(), "Export to excel", MsgBox.BaoLoi);
        }
    }//GEN-LAST:event_btnExportNguoiHocActionPerformed

    private void btnExportHocVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportHocVienActionPerformed
        try {
            Util.saveToExcel(tblHocVien);
        } catch (Exception e) {
            MsgBox.alert(btnExportHocVien, "Export failed by: " + e.getMessage(), "Export to excel", MsgBox.BaoLoi);
        }
    }//GEN-LAST:event_btnExportHocVienActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HocVienJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new HocVienJFrame(null).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntCapNhat;
    private javax.swing.JButton bntThemNH;
    private javax.swing.JButton bntXoa;
    private javax.swing.JButton btnExportHocVien;
    private javax.swing.JButton btnExportNguoiHoc;
    private javax.swing.JComboBox<String> cboChuyenDe;
    private javax.swing.JComboBox<String> cboKhoaHoc;
    private javax.swing.JPanel pnlChuyenDe;
    private javax.swing.JPanel pnlHocVien;
    private javax.swing.JPanel pnlKhoaHoc;
    private javax.swing.JPanel pnlNguoiHoc;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JScrollPane spnHocVien;
    private javax.swing.JScrollPane spnNguoiHoc;
    private javax.swing.JTabbedPane tabsHocVien;
    private javax.swing.JTable tblHocVien;
    private javax.swing.JTable tblNguoiHoc;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    // Biến truy vấn dữ liệu
    private final ChuyenDeDAO daoCD = new ChuyenDeDAO();
    private final KhoaHocDAO daoKH = new KhoaHocDAO();
    private final HocVienDAO daoHV = new HocVienDAO();
    private final NguoiHocDAO daoNH = new NguoiHocDAO();

    // Biến model dữ liệu
    private DefaultComboBoxModel<String> cboModel;
    private DefaultTableModel tblModel;

    // Các biến lưu trữ thông tin dữ liệu
    private final List<Object[]> lSendingMail = new LinkedList<>();
    private List<ChuyenDe> lcd = null;
    private List<KhoaHoc> lkh = null;
    private List<HocVien> lhv = null;
    private List<NguoiHoc> lnh = null;

    //_______________________________________________ TẢI DỮ LIỆU LẦN ĐẦU
    // Tải dữ liệu lần đầu
    private void initDatas(Component com) {
        this.setIconImage(((JFrame) com).getIconImage());
        this.setLocationRelativeTo(com);
        this.lcd = daoCD.SelectAll();

        if (!lcd.isEmpty()) {
            fillChuyenDe();
            if (!lkh.isEmpty()) {
                fillKhoaHoc();
                fillNhHv();
            }
            this.tblHocVien.setAutoCreateRowSorter(true);
            this.tblNguoiHoc.setAutoCreateRowSorter(true);
        } else {
            ((DefaultComboBoxModel<String>) cboChuyenDe.getModel()).removeAllElements();
            this.clear(true);
        }
    }

    //_______________________________________________ XEM DỮ LIỆU TẢI
    // Xem combobox Chuyên đề
    @SuppressWarnings("unchecked")
    private void fillChuyenDe() {
        cboModel = (DefaultComboBoxModel) cboChuyenDe.getModel();
        cboModel.removeAllElements();
        lcd.forEach((x) -> cboModel.addElement(x.getMaCD()));
        this.lkh = daoKH.SelectByChuyenDe(lcd.get(cboChuyenDe.getSelectedIndex()).getMaCD());
    }

    // Xem combobox khóa học
    @SuppressWarnings("unchecked")
    private void fillKhoaHoc() {
        cboModel = (DefaultComboBoxModel) cboKhoaHoc.getModel();
        cboModel.removeAllElements();
        if (!lkh.isEmpty()) {
            lkh.forEach((x) -> {
                cboModel.addElement("CD: " + x.getMaCD() + " - khóa học: ("
                        + x.getMaKH() + "): " + x.getNgayKG());
            });
            int makh = lkh.get(cboKhoaHoc.getSelectedIndex()).getMaKH();
            this.lnh = daoNH.SelectNotInCourse(txtSearch.getText(), makh);
            this.lhv = daoHV.SelectByMaKH(makh);
        }
    }

    // Xem table người học và học viên
    private void fillNhHv() {
        // Bảng người học
        this.SearchAction();

        // Bảng học viên
        tblModel = (DefaultTableModel) tblHocVien.getModel();
        tblModel.setRowCount(0);
        if (!lhv.isEmpty()) {
            for (int i = 0; i < lhv.size(); i++) {
                HocVien x = lhv.get(i);
                // Lấy tên người học từ truy vấn database
                String name = daoNH.SelectById(x.getMaNH()).getHoTen();
                Object[] rowData = {i, x.getMaHV(), x.getMaNH(), name, x.getDiem()};
                tblModel.addRow(rowData);
            }
        }
    }

    //_______________________________________________ THAO TÁC DỮ LIỆU
    // Thao tác dữ liệu trên combobox chuyên đề
    private void ChuyenDeAction() {
        // Tải lại dữ liệu khóa học
        String maCd = lcd.get(cboChuyenDe.getSelectedIndex()).getMaCD();
        this.lkh = daoKH.SelectByChuyenDe(maCd);

        // Xem thông tin dữ liệu theo chuyên đề
        if (lkh.isEmpty()) {
            this.clear(true);
        } else {
            fillKhoaHoc();
            fillNhHv();
        }
    }

    // Thao tác dữ liệu trên combobox khóa học
    private void KhoaHocAction() {
        // Tải lại dữ liệu danh sách
        if (!lkh.isEmpty()) {
            int maKh = lkh.get(cboKhoaHoc.getSelectedIndex()).getMaKH();
            this.lnh = daoNH.SelectNotInCourse(txtSearch.getText(), maKh);
            this.lhv = daoHV.SelectByMaKH(maKh);

            // Xem thông tin dữ liệu trên 2 bảng
            fillNhHv();
        }
    }

    // Thao tác dữ liệu với tìm kiếm
    private void SearchAction() {
        if (lnh != null) {
            // Tải lại dữ liệu tìm
            int makh = lkh.get(cboKhoaHoc.getSelectedIndex()).getMaKH();
            this.lnh = daoNH.SelectNotInCourse(txtSearch.getText(), makh);

            // Xem thông tin dữ liệu bảng người học
            tblModel = (DefaultTableModel) tblNguoiHoc.getModel();
            tblModel.setRowCount(0);
            if (!lnh.isEmpty()) {
                lnh.forEach((x) -> {
                    Object[] rowData = {
                        x.getMaNH(), x.getHoTen(), x.isGioiTinh(),
                        x.getNgaySinh(), x.getDienThoai(), x.getEmail()};
                    tblModel.addRow(rowData);
                });
            }
        }
    }

    // Thao tác dữ liệu với thêm
    private void addAction() {
        if (lcd != null && lkh != null && lnh != null) {
            // dữ liệu thông báo
            String mes = "Đã thêm thông tin";

            // Dữ liệu chuẩn bị để thêm vào database
            int MaKH = lkh.get(cboKhoaHoc.getSelectedIndex()).getMaKH();
            int[] locatese = this.tblNguoiHoc.getSelectedRows();
            int MaHV = daoHV.SelectMaxMaHV(); // Mã lớn nhất trong database

            for (int x : locatese) {
                String maNH = tblNguoiHoc.getValueAt(x, 0).toString();
                HocVien newHV = new HocVien(++MaHV);
                newHV.setMaKH(MaKH);
                newHV.setMaNH(maNH);
                newHV.setDiem(0);
                if (daoHV.Insert(newHV)) {
                    mes += "\nMã người học: " + newHV.getMaNH();
                    mes += " - Mã học viên: " + newHV.getMaHV();
                }
            }

            mes = mes.length() > 250 ? mes.substring(0, 250) + "..." : mes;
            // Lấy lại thông tin sau khi thêm
            int makh = lkh.get(cboKhoaHoc.getSelectedIndex()).getMaKH();
            this.lnh = daoNH.SelectNotInCourse(txtSearch.getText(), makh);
            this.lhv = daoHV.SelectByMaKH(makh);
            this.fillNhHv(); // Xem thông tin dữ liệu
            MsgBox.alert(this, mes, "Thêm mới người học", MsgBox.ThongTin);
            this.tabsHocVien.setSelectedIndex(0);
        }

    }

    // Thao tác sửa dữ liệu điểm học viên
    private void uppAction() {
        // dữ liệu thông báo
        if (lhv != null && lkh != null) {
            String mes = "Đã cập nhật thông tin";

            // Dữ liệu chuẩn bị để thêm vào database;
            for (int i = 0; i < tblHocVien.getRowCount(); i++) {
                int maHV = Integer.parseInt(tblHocVien.getValueAt(i, 1).toString());
                double diem = Double.parseDouble(tblHocVien.getValueAt(i, 4).toString());
                String maNH = tblHocVien.getValueAt(i, 2).toString();
                String email = daoNH.SelectById(maNH).getEmail();

                // Cập nhật học viên
                if (daoHV.UpPoint(diem, maHV)) {
                    mes += "\nMã người học: " + maHV + " - điểm: " + diem;
                    // Chỉ những học viên đã cập nhật -> được chọn để gửi email
                    Object[] rowData = {maNH, maHV, email, diem};
                    lSendingMail.add(rowData);
                }
            }

            mes = mes.length() > 250 ? mes.substring(0, 150) + "..." : mes;
            // Lấy lại thông tin sau khi thêm
            int makh = lkh.get(cboKhoaHoc.getSelectedIndex()).getMaKH();
            this.lnh = daoNH.SelectNotInCourse(txtSearch.getText(), makh);
            this.lhv = daoHV.SelectByMaKH(makh);
            this.fillNhHv(); // Xem thông tin dữ liệu
            if (mes.length() > 25) {
                if (MsgBox.confirm(this, mes + "\n\n Gửi điểm cho học viên?",
                        "Cập nhật điểm người học", MsgBox.CanhBao) == 0) {
                    // Mở bảng danh sách đã chọn
                    new ViewMailSelected(this, true, lSendingMail).setVisible(true);
                }
            } else {
                System.out.println("Không cap nhat thành công!");
            }
        }
    }

    // Thao tác dữ liệu với xóa
    private void delAction() {
        if (lhv != null) {
            // dữ liệu thông báo
            String mes = "Đã xóa thông tin sau: ";

            int[] locatese = this.tblHocVien.getSelectedRows();
            // Xóa dữ liệu
            for (int x : locatese) {
                int maHV = Integer.parseInt(tblHocVien.getValueAt(x, 1).toString());
                if (daoHV.Delete(maHV)) {
                    mes += "\nMã học viên: " + maHV
                            + " - người học: " + tblHocVien.getValueAt(x, 2);
                }
            }

            mes = mes.length() > 250 ? mes.substring(0, 250) + "..." : mes;
            // Lấy lại thông tin sau khi xóa
            int makh = lkh.get(cboKhoaHoc.getSelectedIndex()).getMaKH();
            this.lnh = daoNH.SelectNotInCourse(txtSearch.getText(), makh);
            this.lhv = daoHV.SelectByMaKH(makh);
            this.fillNhHv(); // Xem thông tin dữ liệu
            MsgBox.alert(this, mes, "Xóa thông tin người học", MsgBox.ThongTin);
        }
    }

    private void clear(boolean clearKH) {
        ((DefaultTableModel) tblHocVien.getModel()).setRowCount(0);
        ((DefaultTableModel) tblNguoiHoc.getModel()).setRowCount(0);
        if (lnh != null) {
            lnh.clear();
            lnh = null;
        }
        if (lhv != null) {
            lhv.clear();
            lhv = null;
        }
        if (clearKH) {
            ((DefaultComboBoxModel<String>) cboKhoaHoc.getModel()).removeAllElements();
            lkh.clear();
        }
    }

    //_______________________________________________ CÁC PHƯƠNG THỨC BỔ TRỢ
}
